{"version":3,"file":"static/js/618.f0c59c32.chunk.js","mappings":"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","sources":["Comopnent/ui/Modals/CategoryModal/CategoryModal.tsx","pages/UploadScript/UploadScript.tsx"],"sourcesContent":["import { FC, useEffect, useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ActiveRoute } from \"../../../../Menu\";\nimport { Categoryarray } from \"../../../../DummyData/TableData\";\nimport { useCreateMutation } from \"../../../../Redux/CategoryQuery\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { loginUSer } from \"../../../../customHook/getrole\";\n\nimport { useRefreshTokenMutation } from \"../../../../Redux/AuthSlice\";\nimport useToast from \"../../../../customHook/toast\";\nimport { useSelector } from \"react-redux\";\n\ninterface CategoryModalProps {\n  show: boolean;\n  handleClose: () => void;\n  categoryFilter: any[];\n}\n\nconst CategoryModal: FC<CategoryModalProps> = ({\n  show,\n  handleClose,\n  categoryFilter,\n}) => {\n  const [create, { isLoading, isSuccess, isError, error, data }] =\n    useCreateMutation();\n  const [refreshtoken, Res] = useRefreshTokenMutation();\n\n  \n\n  const navigate = useNavigate();\n  const [selectValue, setSelectValue] = useState(\"\");\n  const handleToast = useToast();\n\n  // Formik setup\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      parent_category: \"\",\n      parent_categoryName:\"\"\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().required(\"Category name is required\"),\n    }),\n    onSubmit: (values) => {\n  \n      \n      create({ token: loginUSer.access, data: values }); // Call mutation with form values\n      handleClose();\n    },\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      handleToast.SuccessToast(`New Category added successfully`);\n    }\n\n    if (isError) {\n      if ((error as any)?.data) {\n     \n        handleToast.ErrorToast(\n          \"Please login again.\"\n        );\n  \n      \n      } else {\n        console.log(\"An unknown error occurred.\");\n      }\n    }\n  }, [isSuccess, isError, error, data]);\n  return (\n    <>\n      <Modal\n        size=\"lg\"\n        fullscreen=\"md-down\" \n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        show={show}\n        onHide={handleClose}\n      >\n        <Modal.Body\n          className=\"bg-light-green\"\n          style={{\n            borderRadius: \"25px\",\n            overflow: \"hidden\",\n          }}\n        >\n          <form onSubmit={formik.handleSubmit} encType=\"multipart/form-data\">\n            <div className=\"mb-3\">\n              <div className=\"row mx-0 px-3\">\n                <div className=\"col-12 m-0\">\n                  <label htmlFor=\"category\" className=\"form-label\">\n                    Category Name\n                  </label>\n                  <input\n                    id=\"name\"\n                    name=\"name\"\n                    className=\"form-control m-0\"\n                    required\n                    value={formik.values.name}\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                  />\n                  {formik.touched.name && formik.errors.name ? (\n                    <div className=\"text-danger\">{formik.errors.name}</div>\n                  ) : null}\n                </div>\n\n                <div className=\"col-12\">\n                  <label htmlFor=\"parent_category\" className=\"form-label\">\n                    Parent Category\n                  </label>\n\n                  <div className=\"dropdown\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"All\"\n                      value={formik.values.parent_categoryName}\n                      readOnly\n                    />\n                    <div\n                      className=\"dropdown-content\"\n                      style={{ height: \"200px\", overflow: \"auto\" }}\n                    >\n                      {categoryFilter.length > 0 &&\n                        categoryFilter.map((item: any, index: any) => (\n                          <span className=\"h6  \" key={item.name}>\n                            <span\n                              className=\"hover-span \"\n                              onClick={() =>\n                               { formik.setFieldValue(\"parent_category\", item.id)\n                                formik.setFieldValue(\"parent_categoryName\", item.name)\n                               }\n                              }\n                            >\n                              {item.name}\n                            </span>\n                          \n                          </span>\n                        ))}\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"col-12 row justify-content-evenly m-0\">\n                  <label\n                    style={{ height: \"33px\" }}\n                    htmlFor=\"category\"\n                    className=\"invisible\"\n                  >\n                    Last Updated\n                  </label>\n\n                  <button\n                    onClick={() =>\n                      navigate(`/account/${ActiveRoute.CategoryManager.path}`)\n                    }\n                    className=\"btn border border-dark col-5 px-3 fw-bold\"\n                    type=\"button\"\n                  >\n                    Edit All Category\n                  </button>\n                  <button\n                    className=\"btn btn-dark col-5 px-3 fw-bold\"\n                    type=\"submit\"\n                  >\n                    Apply\n                  </button>\n                </div>\n              </div>\n            </div>\n          </form>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default CategoryModal;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Icon from \"../../Comopnent/ui/icon/Icon\";\nimport CategoryModal from \"../../Comopnent/ui/Modals/CategoryModal/CategoryModal\";\nimport ArrowDown from '../../assest/image/arrow-down.png';\nimport { useGetUserByTokenQuery } from \"../../Redux/AuthSlice\";\nimport { useGetAllCategoryQuery } from \"../../Redux/CategoryQuery\";\nimport { useDispatch } from \"react-redux\";\nimport { CreateScripts } from \"../../Redux/Script/ScriptSlice\";\nimport useToast from \"../../customHook/toast\";\n\n// Define validation schema using Yup\nconst validationSchema = Yup.object({\n  category: Yup.string().required('Category is required'),\n  output_type: Yup.string().required('Output type is required'),\n  name: Yup.string().required('Script name is required'),\n  file: Yup.mixed().required('File is required'),\n});\n\nconst UploadScriptForm = () => {\n  const dispatch = useDispatch();\n  const [loginUser, setLoginUser] = useState<any>(null);\n  const fileRef:any = useRef(null)\n  // Effect to retrieve loginUser from localStorage on component mount\n  useEffect(() => {\n    const storedLoginUser = localStorage.getItem(\"login\");\n    if (storedLoginUser) {\n      setLoginUser(JSON.parse(storedLoginUser));\n    }\n  }, []);\n\n  const { data: AllCategory, isError } = useGetAllCategoryQuery(\n    { token: loginUser?.access, page_no: 1, page_size: 1000 },\n    {\n      skip: !loginUser, // Skip query execution if loginUser is null\n    }\n  );\n\n \n\n  const categoryData = AllCategory?.results || [];\n \n  \n  const handleToast = useToast();\n  \n  const [categoryFilter, setCategoryFilter] = useState<any>([]);\n\n  const { data, error, isLoading } = useGetUserByTokenQuery({ token: loginUser?.access, page_no: 1, page_size: 1000 },\n    {\n      skip: !loginUser, // Skip query execution if loginUser is null\n    });\n  const [show, setShow] = useState(false);\n  const [selectValue, setSelectValue] = useState('');\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const formik = useFormik({\n    initialValues: {\n      category: '',\n      output_type: '',\n      name: '',\n      file: null,\n      description:'',\n      parentName:''\n    },\n    validationSchema,\n    onSubmit:async (values:any,{resetForm}) => {\n      // Create FormData object\n      const formData = new FormData();\n      formData.append('category', values.category);\n      formData.append('output_type', 'plt');\n      formData.append('name', values.name);\n      formData.append('file', values.file);\n      formData.append('description',values.description)\n      // Dispatch the action with FormData\n   await   dispatch(CreateScripts({formData,token: loginUser?.access})as any);\nresetForm()\nfileRef.current.value=''\n      handleToast.SuccessToast(`New Script added successfully`);\n    },\n  });\n\n  // useEffect(() => {\n  //   const categoryMap: any = {};\n  //   categoryData.forEach((cat: any) => {\n  //     categoryMap[cat.id] = { ...cat, subcategories: [] };\n  //   });\n  //   categoryData.forEach((cat: any) => {\n  //     if (cat?.parent_category !== null) {\n  //       const parent:any = Object.values(categoryMap).find(\n  //         (parentCat: any) => parentCat.name === cat?.parent_category\n  //       );\n  //       if (parent) {\n  //         parent.subcategories.push(categoryMap[cat.id]);\n  //       }\n  //     }\n  //   });\n  //   const structuredCategories = Object.values(categoryMap).filter(\n  //     (cat: any) => cat?.parent_category === null\n  //   );\n \n    \n  //   setCategoryFilter(structuredCategories);\n  // }, [categoryData]);\n\n  return (\n    <>\n      <div className=\"UploadScript_main_wrap mt-3\">\n        <h1 className=\"h1 fw-bold\">Upload a Script</h1>\n\n        <div className=\"d-flex justify-content-center\">\n          <form\n            className=\"w-75\"\n            style={{ maxWidth: \"600px\" }}\n            onSubmit={formik.handleSubmit}\n            encType=\"multipart/form-data\"\n          >\n            <div className=\"mb-3\">\n              <label htmlFor=\"category\" className=\"form-label\">Category</label>\n              <div className=\"row mx-0 p-0\">\n                <div className=\"col-10 col-sm-10 col-md-11 m-0 p-0 pe-1\">\n                  <div className=\"dropdown\">\n                    <div className=\"arrow_down\">\n                      <img src={ArrowDown} alt=\"\" />\n                    </div>\n                    <input\n                      type=\"text\"\n                      placeholder=\"All\"\n                      value={formik.values.parentName}\n                      \n                      readOnly\n                      className={`form-control ${formik.touched.category && formik.errors.category ? 'input-error' : ''}`}\n                    />\n                    <div className=\"dropdown-content\" style={{ height: '200px', overflow: 'auto' }}>\n                      {categoryData.length > 0 && categoryData.map((item: any, index: any) => (\n                        <span className=\"h6 hover-span\" key={item.name} onClick={() => {\n                          formik.setFieldValue(\"parentName\", item.name)\n                          formik.setFieldValue('category', item.id)}}>\n                          {item.name}\n                         \n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n                <button\n                  className=\"btn btn-dark col-2 col-sm-2 col-md-1 p-0 justify-content-center\"\n                  type=\"button\"\n                  onClick={handleShow}\n                >\n                  <Icon icon=\"Add\" size=\"30px\" />\n                </button>\n                {formik.touched.category && formik.errors.category ? (\n                  <div className=\"error-message\">{formik.errors.category as any}</div>\n                ) : null}\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"output_type\" className=\"form-label\">How would you like to view data?</label>\n              <div className=\"dropdown\">\n                <div className=\"arrow_down\">\n                  <img src={ArrowDown} alt=\"\" />\n                </div>\n                <input\n                  type=\"text\"\n                  id=\"output_type\"\n                  placeholder=\"All\"\n                  className={`form-control ${formik.touched.output_type && formik.errors.output_type ? 'input-error' : ''}`}\n                  {...formik.getFieldProps('output_type')}\n                />\n                <div className=\"dropdown-content\">\n                  <span className=\"hover-span\" onClick={() => formik.setFieldValue('output_type', 'pd')}>Chart</span>\n                  <span className=\"hover-span\" onClick={() => formik.setFieldValue('output_type', 'plt')}>Table</span>\n                  <span className=\"hover-span\" onClick={() => formik.setFieldValue('output_type', 'pd plt')}>Chart and Table</span>\n                </div>\n                {formik.touched.output_type && formik.errors.output_type ? (\n                  <div className=\"error-message\">{formik.errors.output_type as any}</div>\n                ) : null}\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"name\" className=\"form-label\">Script name</label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                className={`form-control ${formik.touched.name && formik.errors.name ? 'input-error' : ''}`}\n                {...formik.getFieldProps('name')}\n              />\n              {formik.touched.name && formik.errors.name ? (\n                <div className=\"error-message\">{formik.errors.name as any}</div>\n              ) : null}\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"file\" className=\"form-label\">Select a file</label>\n              <input\n                type=\"file\"\n                id=\"file\"\n                name=\"file\"\n              ref={fileRef}\n                className={`form-control ${formik.touched.file && formik.errors.file ? 'input-error' : ''}`}\n                onChange={(event: any) => formik.setFieldValue('file', event.target.files[0])}\n              />\n              {formik.touched.file && formik.errors.file ? (\n                <div className=\"error-message\">{formik.errors.file as any}</div>\n              ) : null}\n            </div>\n\n            <div className=\"mx-auto text-center d-flex justify-content-between row \">\n              <button type=\"submit\" className=\"btn btn-dark my-1 first-line:col-12 col-sm-12 col-md-5\">Upload</button>\n              <button\n                type=\"reset\"\n                className=\"btn btn-light bordered-button my-1  col-12 col-sm-12 col-md-5\"\n                onClick={() => formik.resetForm()}\n              >\n                Reset\n              </button>\n            </div>\n          </form>\n\n          <CategoryModal show={show} handleClose={handleClose} categoryFilter={categoryData} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default UploadScriptForm;\n"],"names":["_ref","show","handleClose","categoryFilter","create","isLoading","isSuccess","isError","error","data","useCreateMutation","refreshtoken","Res","useRefreshTokenMutation","navigate","useNavigate","selectValue","setSelectValue","useState","handleToast","useToast","formik","useFormik","initialValues","name","parent_category","parent_categoryName","validationSchema","Yup","required","onSubmit","values","token","loginUSer","access","useEffect","SuccessToast","ErrorToast","console","log","_jsx","_Fragment","children","Modal","size","fullscreen","centered","onHide","Body","className","style","borderRadius","overflow","handleSubmit","encType","_jsxs","htmlFor","id","value","onChange","handleChange","onBlur","handleBlur","touched","errors","type","placeholder","readOnly","height","length","map","item","index","onClick","setFieldValue","ActiveRoute","CategoryManager","path","category","output_type","file","UploadScriptForm","dispatch","useDispatch","loginUser","setLoginUser","fileRef","useRef","storedLoginUser","localStorage","getItem","JSON","parse","AllCategory","useGetAllCategoryQuery","page_no","page_size","skip","categoryData","results","setCategoryFilter","useGetUserByTokenQuery","setShow","description","parentName","async","resetForm","formData","FormData","append","CreateScripts","current","maxWidth","src","ArrowDown","alt","handleShow","Icon","icon","getFieldProps","ref","event","target","files","CategoryModal"],"sourceRoot":""}