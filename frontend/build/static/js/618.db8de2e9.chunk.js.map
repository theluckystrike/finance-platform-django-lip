{"version":3,"file":"static/js/618.db8de2e9.chunk.js","mappings":"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","sources":["Comopnent/ui/Modals/CategoryModal/CategoryModal.tsx","pages/UploadScript/UploadScript.tsx"],"sourcesContent":["import { FC, useState } from 'react';\nimport Modal from 'react-bootstrap/Modal';\nimport { useNavigate } from 'react-router-dom';\nimport { ActiveRoute } from '../../../../Menu';\nimport { Categoryarray } from '../../../../DummyData/TableData';\n\ninterface CategoryModalProps {\n \n  show: boolean;\n  handleClose: () => void;\n}\n\nconst CategoryModal: FC<CategoryModalProps> = ({show, handleClose }) => {\n  const navigate = useNavigate()\n\n  const [selectVlaue,setSelectValue]=useState('')\n  return (\n    <>\n      <Modal  size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered show={show} onHide={handleClose}>\n       \n        <Modal.Body className='bg-light-green' style={{\n          borderRadius:'25px',\n          overflow:'hidden'\n        }}> \n\n        <form  method=\"post\" encType=\"multipart/form-data\">\n          <div className=\"mb-3\">\n            <div className=\"row mx-0 px-3\">\n              <div className=\"col-12 m-0  \">\n            <label htmlFor=\"category\" className=\"form-label\">Category Name</label>\n                <input\n                  id=\"category\"\n                  name=\"category\"\n                  className=\"form-control m-0\"\n                  \n                  required\n                >\n                   \n                </input>\n              </div>\n        \n              <div className=\"col-12  \">\n            <label htmlFor=\"category\" className=\"form-label\">Parent Category</label>\n\n                  <div className=\"dropdown\">\n                    <input type=\"text\" placeholder=\"All\" value={selectVlaue}/>\n                    <div className=\"dropdown-content\" style={ {height:'200px',overflow:'auto'}}>\n                      {Categoryarray.map((item, index) => (\n                        <span className=\"h6\" key={index}>\n                          {item.name}\n\n                          {item.subcategory.map((subitem, subindex) => (\n                            <span className=\"text-muted\" key={subindex}>\n                              {subitem.name}\n\n                              {subitem.innerCategory.map(\n                                (inneritem, innerindex) => (\n                                  <span\n                                    className=\"fs-6 hover-span\"\n                                    key={innerindex}\n                                    onClick={()=>setSelectValue(inneritem)}\n                                  >\n                                    {inneritem}\n                                  </span>\n                                )\n                              )}\n                            </span>\n                          ))}\n                        </span>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              \n            <div className=\"col-12 row  justify-content-evenly m-0  \">\n            <label style={{  height: '33px'\n}} htmlFor=\"category\" className=\"invisible\">Last Updated</label>\n \n <button\n              onClick={ ()=>navigate(`/account/${ActiveRoute.CategoryManager.path}`)}\n                className=\"btn  border border-dark col-5  px-3   fw-bold  \"\n                type=\"button\"\n           \n              >\n               Edit All Category\n              </button>\n              <button\n              onClick={handleClose}\n                className=\"btn btn-dark col-5  px-3   fw-bold  \"\n                type=\"button\"\n           \n              >\n               Apply\n              </button>\n              </div>  \n              \n         \n            </div>\n          </div>\n \n        </form>\n\n        </Modal.Body>\n        {/* <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleClose}>\n            Save Changes\n          </Button>\n        </Modal.Footer> */}\n      </Modal>\n    </>\n  );\n}\n\nexport default CategoryModal;\n","import React, { useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Icon from \"../../Comopnent/ui/icon/Icon\";\nimport CategoryModal from \"../../Comopnent/ui/Modals/CategoryModal/CategoryModal\";\nimport { Categoryarray } from \"../../DummyData/TableData\";\nimport ArrowDown from '../../assest/image/arrow-down.png';\nimport { useGetuserbytokenQuery } from \"../../Redux/AuthSlice\";\nimport { loginUSer } from \"../../customHook/getrole\";\n\n// Define validation schema using Yup\nconst validationSchema = Yup.object({\n  category: Yup.string().required('Category is required'),\n  outputType: Yup.string().required('Output type is required'),\n  name: Yup.string().required('Script name is required'),\n  file: Yup.mixed().required('File is required'),\n});\n\nconst UploadScriptForm = () => {\n\n\n  const { data, error, isLoading } = useGetuserbytokenQuery({ token:loginUSer.access, page_no:1, page_size:1000 });\n  const [show, setShow] = useState(false);\n  const [selectValue, setSelectValue] = useState('');\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const formik = useFormik({\n    initialValues: {\n      category: '',\n      outputType: '',\n      name: '',\n      file: null,\n    },\n    validationSchema,\n    onSubmit: (values) => {\n      console.log(values);\n      // Handle form submission\n      // Example: navigate('account/upload');\n    },\n  });\n\n  return (\n    <>\n      <div className=\"UploadScript_main_wrap mt-3\">\n        <h1 className=\"h1 fw-bold\">Upload a Script</h1>\n\n        <div className=\"d-flex justify-content-center\">\n          <form\n            className=\"w-75\"\n            style={{ maxWidth: \"600px\" }}\n            onSubmit={formik.handleSubmit}\n            encType=\"multipart/form-data\"\n          >\n            <div className=\"mb-3\">\n              <label htmlFor=\"category\" className=\"form-label\">\n                Category\n              </label>\n              <div className=\"row mx-0 p-0\">\n                <div className=\"col-11 m-0 p-0 pe-1\">\n                  <div className=\"dropdown\">\n                    <div className=\"arrow_down\">\n                      <img src={ArrowDown} alt=\"\" />\n                    </div>\n                    <input\n                      type=\"text\"\n                      placeholder=\"All\"\n                      {...formik.getFieldProps('category')}\n                      readOnly\n                  className={`form-control ${formik.touched.category && formik.errors.category ? 'input-error' : ''}`}\n\n                    />\n                    <div className=\"dropdown-content\" style={{ height: '200px', overflow: 'auto' }}>\n                      {Categoryarray.map((item, index) => (\n                        <span className=\"h6\" key={index}>\n                          {item.name}\n                          {item.subcategory.map((subitem, subindex) => (\n                            <span className=\"text-muted\" key={subindex}>\n                              {subitem.name}\n                              {subitem.innerCategory.map((inneritem, innerindex) => (\n                                <span\n                                  className=\"fs-6 hover-span\"\n                                  key={innerindex}\n                                  onClick={() => formik.setFieldValue('category', inneritem) }\n                                >\n                                  {inneritem}\n                                </span>\n                              ))}\n                            </span>\n                          ))}\n                        </span>\n                      ))}\n                    </div>\n                  \n                  </div>\n                </div>\n                <button\n                  className=\"btn btn-dark col col-1 p-0 justify-content-center\"\n                  type=\"button\"\n                  onClick={handleShow}\n                >\n                  <Icon icon=\"Add\" size=\"30px\" />\n                </button>\n                {formik.touched.category && formik.errors.category ? (\n                  <div className=\"error-message\">{formik.errors.category}</div>\n                ) : null}\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"outputType\" className=\"form-label\">\n                How would you like to view data?\n              </label>\n              <div className=\"dropdown\">\n                <div className=\"arrow_down\">\n                  <img src={ArrowDown} alt=\"\" />\n                </div>\n                <input\n                  type=\"text\"\n                  id=\"outputType\"\n               \n                  placeholder=\"All\"\n                  className={`form-control ${formik.touched.outputType && formik.errors.outputType ? 'input-error' : ''}`}\n                  {...formik.getFieldProps('outputType')}\n                />\n                <div className=\"dropdown-content\">\n                  <span className=\"hover-span\" onClick={() => formik.setFieldValue('outputType', 'Chart')}>Chart</span>\n                  <span className=\"hover-span\" onClick={() => formik.setFieldValue('outputType', 'Table')}>Table</span>\n                  <span className=\"hover-span\" onClick={() => formik.setFieldValue('outputType', 'Chart and Table')}>Chart and Table</span>\n                </div>\n                {formik.touched.outputType && formik.errors.outputType ? (\n                  <div className=\"error-message\">{formik.errors.outputType}</div>\n                ) : null}\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"name\" className=\"form-label\">\n                Script name\n              </label>\n              <input\n                type=\"text\"\n                id=\"name\"\n              \n                className={`form-control ${formik.touched.name && formik.errors.name ? 'input-error' : ''}`}\n                {...formik.getFieldProps('name')}\n              />\n              {formik.touched.name && formik.errors.name ? (\n                <div className=\"error-message\">{formik.errors.name}</div>\n              ) : null}\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"file\" className=\"form-label\">\n                Select a file\n              </label>\n              <input\n                type=\"file\"\n                id=\"file\"\n                name=\"file\"\n                className={`form-control ${formik.touched.file && formik.errors.file ? 'input-error' : ''}`}\n                onChange={(event:any) => formik.setFieldValue('file', event.target.files[0])}\n              />\n              {formik.touched.file && formik.errors.file ? (\n                <div className=\"error-message\">{formik.errors.file}</div>\n              ) : null}\n            </div>\n\n            <div className=\"mx-auto text-center d-flex justify-content-between\">\n              <button type=\"submit\" className=\"btn btn-dark px-5\">\n                Upload\n              </button>\n              <button\n                type=\"reset\"\n                className=\"btn btn-light bordered-button px-5\"\n                onClick={() => formik.resetForm()}\n              >\n                Reset\n              </button>\n            </div>\n          </form>\n\n          <CategoryModal show={show} handleClose={handleClose} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default UploadScriptForm;\n"],"names":["_ref","show","handleClose","navigate","useNavigate","selectVlaue","setSelectValue","useState","_jsx","_Fragment","children","Modal","size","centered","onHide","Body","className","style","borderRadius","overflow","method","encType","_jsxs","htmlFor","id","name","required","type","placeholder","value","height","Categoryarray","map","item","index","subcategory","subitem","subindex","innerCategory","inneritem","innerindex","onClick","ActiveRoute","CategoryManager","path","validationSchema","Yup","category","outputType","file","UploadScriptForm","data","error","isLoading","useGetuserbytokenQuery","token","loginUSer","access","page_no","page_size","setShow","selectValue","formik","useFormik","initialValues","onSubmit","values","console","log","maxWidth","handleSubmit","src","ArrowDown","alt","getFieldProps","readOnly","touched","errors","setFieldValue","handleShow","Icon","icon","onChange","event","target","files","resetForm","CategoryModal"],"sourceRoot":""}