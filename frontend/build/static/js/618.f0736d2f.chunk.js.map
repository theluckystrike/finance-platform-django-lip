{"version":3,"file":"static/js/618.f0736d2f.chunk.js","mappings":"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","sources":["Comopnent/ui/Modals/CategoryModal/CategoryModal.tsx","pages/UploadScript/UploadScript.tsx"],"sourcesContent":["import { FC, useEffect, useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ActiveRoute } from \"../../../../Menu\";\nimport { Categoryarray } from \"../../../../DummyData/TableData\";\nimport { useCreateMutation } from \"../../../../Redux/CategoryQuery\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { loginUSer } from \"../../../../customHook/getrole\";\nimport ArrowDown from \"../../../../assest/image/arrow-down.png\";\n\nimport { useRefreshTokenMutation } from \"../../../../Redux/AuthSlice\";\nimport useToast from \"../../../../customHook/toast\";\nimport { useSelector } from \"react-redux\";\n\ninterface CategoryModalProps {\n  show: boolean;\n  handleClose: () => void;\n  categoryFilter: any;\n}\n\nconst CategoryModal: FC<CategoryModalProps> = ({\n  show,\n  handleClose,\n  categoryFilter,\n}) => {\n  const [create, { isLoading, isSuccess, isError, error, data }] =\n    useCreateMutation();\n  const [refreshtoken, Res] = useRefreshTokenMutation();\n\n  const navigate = useNavigate();\n  const [selectValue, setSelectValue] = useState(\"\");\n  const handleToast = useToast();\n\n  // Formik setup\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      category: \"\",\n      parentName: \"\",\n    },\n    validationSchema: Yup.object({\n      name: Yup.string().required(\"Category name is required\"),\n    }),\n    onSubmit: (values) => {\n      create({\n        token: loginUSer.access,\n        data: { ...values, parent_category: values.category },\n      }); // Call mutation with form values\n      handleClose();\n    },\n  });\n\n  useEffect(() => {\n    if (isSuccess) {\n      handleToast.SuccessToast(`New Category added successfully`);\n    }\n\n    if (isError) {\n      if ((error as any)?.data) {\n        handleToast.ErrorToast(\"Please login again.\");\n      } else {\n        console.log(\"An unknown error occurred.\");\n      }\n    }\n  }, [isSuccess, isError, error, data]);\n\n  const [FilterCategory, setFilterCategory] = useState([]);\n  const [dataTypeOption, setDataTypeOption] = useState(false);\n  const FilterData = (value: any) => {\n    const trimmedValue = value.trim(); // Trim the input value\n    if (trimmedValue !== \"\") {\n      const res = categoryFilter.filter((i: any) =>\n        i.name.toLowerCase().includes(trimmedValue.toLowerCase())\n      );\n      setFilterCategory(res);\n    } else {\n      setFilterCategory([]);\n    }\n  };\n\n  useEffect(() => {\n    FilterData(formik.values.parentName);\n  }, [formik.values.parentName]);\n  return (\n    <>\n      <Modal\n        size=\"lg\"\n        fullscreen=\"md-down\"\n        aria-labelledby=\"contained-modal-title-vcenter\"\n        centered\n        show={show}\n        onHide={handleClose}\n      >\n        <Modal.Body\n          className=\"bg-light-green\"\n          style={{\n            borderRadius: \"25px\",\n            overflow: \"hidden\",\n          }}\n        >\n          <form onSubmit={formik.handleSubmit} encType=\"multipart/form-data\">\n            <div className=\"mb-3\">\n              <div className=\"row mx-0 px-3\">\n                <div className=\"col-12 m-0\">\n                  <label htmlFor=\"category\" className=\"form-label\">\n                    Category Name\n                  </label>\n                  <input\n                    id=\"name\"\n                    name=\"name\"\n                    className=\"form-control m-0\"\n                    required\n                    value={formik.values.name}\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                  />\n                  {formik.touched.name && formik.errors.name ? (\n                    <div className=\"text-danger\">{formik.errors.name}</div>\n                  ) : null}\n                </div>\n\n                <div className=\"col-12\">\n                  <label htmlFor=\"category\" className=\"form-label\">\n                    Parent Category\n                  </label>\n\n                  <div className=\"dropdown\">\n                    <div className=\"arrow_down\">\n                      <img src={ArrowDown} alt=\"\" />\n                    </div>\n                    <input\n                      type=\"text\"\n                      placeholder=\"Select a category\"\n                      value={formik.values.parentName}\n                      onChange={(e) => {\n                        formik.setFieldValue(\"parentName\", e.target.value);\n\n                        FilterData(e.target.value);\n                      }}\n                      className={`form-control ${\n                        formik.touched.category && formik.errors.category\n                          ? \"input-error\"\n                          : \"\"\n                      }`}\n                    />\n                    <div\n                      className=\"dropdown-content\"\n                      style={{\n                        maxHeight: \"200px\",\n                        overflow: \"auto\",\n                        display: FilterCategory.length > 0 ? \"block\" : \"none\",\n                      }}\n                    >\n                      {FilterCategory.length > 0 &&\n                        FilterCategory.map((item: any, index: any) => (\n                          <span\n                            className=\"h6 hover-span\"\n                            key={item.name}\n                            onClick={async () => {\n                              await formik.setFieldValue(\n                                \"parentName\",\n                                item.name\n                              );\n                              await formik.setFieldValue(\"category\", item.id);\n                              setFilterCategory([]);\n                            }}\n                          >\n                            {item.name}\n                          </span>\n                        ))}\n                    </div>\n                  </div>\n                </div>                                                  \n\n                <div className=\"col-12 row justify-content-evenly m-0\">\n                  <label\n                    style={{ height: \"33px\" }}\n                    htmlFor=\"category\"\n                    className=\"invisible\"\n                  >\n                    Last Updated\n                  </label>\n\n                  <button\n                    onClick={() =>\n                      navigate(`/account/${ActiveRoute.CategoryManager.path}`)\n                    }\n                    className=\"btn border border-dark col-5 px-3 fw-bold\"\n                    type=\"button\"\n                  >\n                    Edit All Category\n                  </button>\n                  <button\n                    className=\"btn btn-dark col-5 px-3 fw-bold\"\n                    type=\"submit\"\n                  >\n                    Create\n                  </button>\n                </div>\n              </div>\n            </div>\n          </form>\n        </Modal.Body>\n      </Modal>\n    </>\n  );\n};\n\nexport default CategoryModal;\n","import React, { useEffect, useRef, useState } from \"react\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport Icon from \"../../Comopnent/ui/icon/Icon\";\nimport CategoryModal from \"../../Comopnent/ui/Modals/CategoryModal/CategoryModal\";\nimport ArrowDown from \"../../assest/image/arrow-down.png\";\nimport { useGetUserByTokenQuery } from \"../../Redux/AuthSlice\";\nimport { useGetAllCategoryQuery } from \"../../Redux/CategoryQuery\";\nimport { useDispatch } from \"react-redux\";\nimport { CreateScripts } from \"../../Redux/Script/ScriptSlice\";\nimport useToast from \"../../customHook/toast\";\n\n// Define validation schema using Yup\nconst validationSchema = Yup.object({\n  category: Yup.string().required(\"Category is required\"),\n  output_type: Yup.string().required(\"Output type is required\"),\n  name: Yup.string().required(\"Script name is required\"),\n  file: Yup.mixed().required(\"File is required\"),\n});\n\nconst UploadScriptForm = () => {\n  const dispatch = useDispatch();\n  const [loginUser, setLoginUser] = useState<any>(null);\n  const fileRef: any = useRef(null);\n  // Effect to retrieve loginUser from localStorage on component mount\n  useEffect(() => {\n    localStorage.removeItem('filterquery')\n\n    const storedLoginUser = localStorage.getItem(\"login\");\n    if (storedLoginUser) {\n      setLoginUser(JSON.parse(storedLoginUser));\n    }\n  }, []);\n\n  const { data: AllCategory, isError } = useGetAllCategoryQuery(\n    { token: loginUser?.access, page_no: 1, page_size: 1000 },\n    {\n      skip: !loginUser, // Skip query execution if loginUser is null\n    }\n  );\n\n  const categoryData = AllCategory?.results || [];\n\n  const handleToast = useToast();\n\n  const [categoryFilter, setCategoryFilter] = useState<any>([]);\n\n  const { data, error, isLoading } = useGetUserByTokenQuery(\n    { token: loginUser?.access, page_no: 1, page_size: 1000 },\n    {\n      skip: !loginUser, // Skip query execution if loginUser is null\n    }\n  );\n  const [show, setShow] = useState(false);\n  const [selectValue, setSelectValue] = useState(\"\");\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  const formik = useFormik({\n    initialValues: {\n      category: \"\",\n      output_type: \"\",\n      name: \"\",\n      file: null,\n      description: \"\",\n      parentName: \"\",\n    },\n    validationSchema,\n    onSubmit: async (values: any, { resetForm }) => {\n      // Create FormData object\n      const formData = new FormData();\n      formData.append(\"category\", values.category);\n      formData.append(\"output_type\", \"plt\");\n      formData.append(\"name\", values.name);\n      formData.append(\"file\", values.file);\n      formData.append(\"description\", values.description);\n      // Dispatch the action with FormData\n      await dispatch(\n        CreateScripts({ formData, token: loginUser?.access }) as any\n      );\n      resetForm();\n      fileRef.current.value = \"\";\n      handleToast.SuccessToast(`New Script added successfully`);\n    },\n  });\nconst [FilterCategory,setFilterCategory]=useState([])\nconst [dataTypeOption ,setDataTypeOption]=useState(false)\nconst FilterData = (value: any) => {\n  const trimmedValue = value.trim(); // Trim the input value\n  if (trimmedValue !== '') {\n    const res = categoryData.filter((i: any) =>\n      i.name.toLowerCase().includes(trimmedValue.toLowerCase())\n    );\n    setFilterCategory(res);\n  } else {\n    setFilterCategory([]);\n  }\n}\n\n\nuseEffect(()=>{\n  localStorage.removeItem('filterquery')\n\n  FilterData(formik.values.parentName)\n},[formik.values.parentName])\n  return (\n    <>\n      <div className=\"UploadScript_main_wrap mt-3\">\n        <h1 className=\"h1 fw-bold\">Upload a Script</h1>\n        <div className=\"d-flex justify-content-center\">\n          <form\n            className=\"w-75\"\n            style={{ maxWidth: \"600px\" }}\n            onSubmit={formik.handleSubmit}\n            encType=\"multipart/form-data\"\n          >\n            <div className=\"mb-3\">\n              <label htmlFor=\"category\" className=\"form-label\">\n                Category\n              </label>\n              <div className=\"row mx-0 p-0\">\n                <div className=\"col-10 col-sm-10 col-md-11 m-0 p-0 pe-1\">\n                  <div className=\"dropdown\">\n                    <div className=\"arrow_down\">\n                      <img src={ArrowDown} alt=\"\" />\n                    </div>\n                    <input\n                      type=\"text\"\n                      placeholder=\"Select a category\"\n                      value={formik.values.parentName}\n                      onChange={(e) => {\n                      formik.setFieldValue(\"parentName\", e.target.value)\n                      FilterData( e.target.value)\n                      }}\n                      className={`form-control ${\n                        formik.touched.category && formik.errors.category\n                          ? \"input-error\"\n                          : \"\"\n                      }`}\n                    />\n                  <div className=\"dropdown-content\"\n                   style={{ maxHeight: \"200px\", overflow: \"auto\", display: FilterCategory.length > 0  ? 'block' : 'none' }}>\n                      {FilterCategory.length > 0  &&\n                        FilterCategory.map((item: any, index: any) => (\n                          <span\n                            className=\"h6 hover-span\"\n                            key={item.name}\n                            onClick={async () => {\n                             await formik.setFieldValue(\"parentName\", item.name);\n                             await  formik.setFieldValue(\"category\", item.id);\n                             setFilterCategory([])\n                            }} >\n                            {item.name}\n                          </span>\n                        ))}\n                    </div>\n                  </div>\n                </div>\n                <button\n                  className=\"btn btn-dark col-2 col-sm-2 col-md-1 p-0 justify-content-center\"\n                  type=\"button\"\n                  onClick={handleShow}\n                >\n                  <Icon icon=\"Add\" size=\"30px\" />\n                </button>\n                {formik.touched.category && formik.errors.category ? (\n                  <div className=\"error-message\">\n                    {formik.errors.category as any}\n                  </div>\n                ) : null}\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"output_type\" className=\"form-label\">\n                How would you like to view data?\n              </label>\n              <div className=\"dropdown\">\n                <div className=\"arrow_down\">\n                  <img src={ArrowDown} alt=\"\" />\n                </div>\n                <input\n                  type=\"text\"\n                  id=\"output_type\"\n                  placeholder=\"Select a view data type\"\n                  value={formik.values.output_type}\n               readOnly\n                     onFocus={()=>setDataTypeOption(true)}\n                    //  onBlur={()=>setDataTypeOption(false)}\n                  className={`form-control ${\n                    formik.touched.output_type && formik.errors.output_type\n                      ? \"input-error\"\n                      : \"\"\n                  }`}\n                />\n                <div className=\"dropdown-content\" style={{ maxHeight: \"200px\", overflow: \"auto\", display: dataTypeOption ? 'block' : 'none' }}>\n                  <span\n                    className=\"hover-span\"\n                    onClick={async() => { await formik.setFieldValue(\"output_type\", \"pd\")\n                      setDataTypeOption(false)\n                    }}\n                  >\n                    Chart\n                  </span>\n                  <span\n                    className=\"hover-span\"\n                    onClick={async() => {await formik.setFieldValue(\"output_type\", \"plt\")\n                      setDataTypeOption(false)\n                    }}\n                  >\n                    Table\n                  </span>\n                  <span\n                    className=\"hover-span\"\n                    onClick={ async() =>\n                    { await formik.setFieldValue(\"output_type\", \"pd plt\")\n                      setDataTypeOption(false)\n                    }\n                    }\n                  >\n                    Chart and Table\n                  </span>\n                </div>\n                {formik.touched.output_type && formik.errors.output_type ? (\n                  <div className=\"error-message\">\n                    {formik.errors.output_type as any}\n                  </div>\n                ) : null}\n              </div>\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"name\" className=\"form-label\">\n                Script name\n              </label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                placeholder=\"Enter script name\"\n                className={`form-control ${\n                  formik.touched.name && formik.errors.name ? \"input-error\" : \"\"\n                }`}\n                {...formik.getFieldProps(\"name\")}\n              />\n              {formik.touched.name && formik.errors.name ? (\n                <div className=\"error-message\">{formik.errors.name as any}</div>\n              ) : null}\n            </div>\n\n            <div className=\"mb-3\">\n              <label htmlFor=\"file\" className=\"form-label\" title=\"Select only .py files\">\n                Select a file <Icon icon=\"InfoOutline\" size=\"18px\" />\n              </label>\n              <input\n  type=\"file\"\n  id=\"file\"\n  name=\"file\"\n  ref={fileRef}\n  accept=\".py\" // Restrict to only .py files\n  className={`form-control ${\n    formik.touched.file && formik.errors.file ? \"input-error\" : \"\"\n  }`}\n  onChange={(event: any) =>\n    formik.setFieldValue(\"file\", event.target.files[0])\n  }\n/>\n              {formik.touched.file && formik.errors.file ? (\n                <div className=\"error-message\">{formik.errors.file as any}</div>\n              ) : null}\n            </div>\n\n            <div className=\"mx-auto text-center d-flex justify-content-between row \">\n              <button\n                type=\"submit\"\n                className=\"btn btn-dark my-1 first-line:col-12 col-sm-12 col-md-5\"\n              >\n                Upload\n              </button>\n              <button\n                type=\"reset\"\n                className=\"btn btn-light bordered-button my-1  col-12 col-sm-12 col-md-5\"\n                onClick={() => formik.resetForm()}\n              >\n                Reset\n              </button>\n            </div>\n          </form>\n\n          <CategoryModal\n            show={show}\n            handleClose={handleClose}\n            categoryFilter={categoryData}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default UploadScriptForm;\n"],"names":["_ref","show","handleClose","categoryFilter","create","isLoading","isSuccess","isError","error","data","useCreateMutation","refreshtoken","Res","useRefreshTokenMutation","navigate","useNavigate","selectValue","setSelectValue","useState","handleToast","useToast","formik","useFormik","initialValues","name","category","parentName","validationSchema","Yup","required","onSubmit","values","token","loginUSer","access","parent_category","useEffect","SuccessToast","ErrorToast","console","log","FilterCategory","setFilterCategory","dataTypeOption","setDataTypeOption","FilterData","value","trimmedValue","trim","res","filter","i","toLowerCase","includes","_jsx","_Fragment","children","Modal","size","fullscreen","centered","onHide","Body","className","style","borderRadius","overflow","handleSubmit","encType","_jsxs","htmlFor","id","onChange","handleChange","onBlur","handleBlur","touched","errors","src","ArrowDown","alt","type","placeholder","e","setFieldValue","target","maxHeight","display","length","map","item","index","onClick","async","height","ActiveRoute","CategoryManager","path","output_type","file","UploadScriptForm","dispatch","useDispatch","loginUser","setLoginUser","fileRef","useRef","localStorage","removeItem","storedLoginUser","getItem","JSON","parse","AllCategory","useGetAllCategoryQuery","page_no","page_size","skip","categoryData","results","setCategoryFilter","useGetUserByTokenQuery","setShow","description","resetForm","formData","FormData","append","CreateScripts","current","maxWidth","handleShow","Icon","icon","readOnly","onFocus","getFieldProps","title","ref","accept","event","files","CategoryModal"],"sourceRoot":""}