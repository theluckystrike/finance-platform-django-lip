{"version":3,"file":"static/js/682.ab7d0985.chunk.js","mappings":"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","sources":["customHook/useSortable.tsx","customHook/useTImeformnt.jsx","Comopnent/ui/Modals/MergeReports/MergeReports.tsx","pages/Reports/Reports.tsx"],"sourcesContent":["import { useMemo, useState } from 'react';\r\n\r\ninterface SortConfig {\r\n\tkey: string;\r\n\tdirection: 'ascending' | 'descending';\r\n}\r\n\r\nconst useSortableData = (items: any[], config: SortConfig | null = null) => {\r\n\tconst [sortConfig, setSortConfig] = useState<SortConfig | null>(config);\r\n\r\n\tconst sortedItems = useMemo(() => {\r\n\t\tconst sortableItems = [...items];\r\n\t\tif (sortConfig !== null) {\r\n\t\t\tsortableItems.sort((a, b) => {\r\n\t\t\t\tconst aValue = a[sortConfig.key];\r\n\t\t\t\tconst bValue = b[sortConfig.key];\r\n\r\n\t\t\t\tconst isDate = !isNaN(Date.parse(aValue)) && !isNaN(Date.parse(bValue));\r\n\r\n\t\t\t\tif (isDate) {\r\n\t\t\t\t\tconst dateA = new Date(aValue);\r\n\t\t\t\t\tconst dateB = new Date(bValue);\r\n\r\n\t\t\t\t\tif (dateA < dateB) {\r\n\t\t\t\t\t\treturn sortConfig.direction === 'ascending' ? -1 : 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (dateA > dateB) {\r\n\t\t\t\t\t\treturn sortConfig.direction === 'ascending' ? 1 : -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (aValue < bValue) {\r\n\t\t\t\t\t\treturn sortConfig.direction === 'ascending' ? -1 : 1;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (aValue > bValue) {\r\n\t\t\t\t\t\treturn sortConfig.direction === 'ascending' ? 1 : -1;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn sortableItems;\r\n\t}, [items, sortConfig]);\r\n\r\n\tconst requestSort = (key: string) => {\r\n\t\tlet direction: 'ascending' | 'descending' = 'ascending';\r\n\t\tif (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\r\n\t\t\tdirection = 'descending';\r\n\t\t}\r\n\t\tsetSortConfig({ key, direction });\r\n\t};\r\n\r\n\tconst getClassNamesFor = (key: string) => {\r\n\t\tif (!sortConfig) {\r\n\t\t\treturn 'd-none';\r\n\t\t}\r\n\t\treturn sortConfig.key === key ? sortConfig.direction : 'd-none';\r\n\t};\r\n\r\n\treturn { items: sortedItems, requestSort, getClassNamesFor, sortConfig };\r\n};\r\n\r\nexport default useSortableData;\r\n","import React from 'react';\r\n\r\nconst DateFormatter = ({ isoString }) => {\r\n  // Format the date and time based on the locale\r\n  const formattedDateTime = new Date(isoString).toLocaleString();\r\n\r\n  return (\r\n    <>\r\n      {formattedDateTime}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DateFormatter;\r\n","import { FC, useEffect, useState } from \"react\";\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { GetAllScripts } from \"../../../../Redux/Script/ScriptSlice\";\r\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Select, { MultiValue } from \"react-select\";\r\nimport { Createreports, mergereports } from \"../../../../Redux/Report/Slice\";\r\n\r\n// Define type for the script option\r\ninterface ScriptOption {\r\n  value: string;\r\n  label: string;\r\n}\r\n\r\ninterface CreateReportsProps {\r\n  show: boolean;\r\n  handleClose: () => void;\r\n  allreport:any\r\n}\r\n\r\nconst CreateReports: FC<CreateReportsProps> = ({ show, handleClose,allreport }) => {\r\n  const dispatch = useDispatch();\r\n  const store: any = useSelector((i) => i);\r\n  const allscripts = store?.script?.Scripts?.results || [];\r\n  const [loginUser, setLoginUser] = useState<any>(null);\r\n\r\n  useEffect(() => {\r\n    const storedLoginUser = localStorage.getItem(\"login\");\r\n    if (storedLoginUser) {\r\n      setLoginUser(JSON.parse(storedLoginUser));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if(loginUser){\r\n\r\n      const getDAta = async () => {\r\n        try {\r\n          await dispatch(GetAllScripts({ token: loginUser?.access }));\r\n        } catch (error) {\r\n          console.log(error);\r\n        }\r\n      };\r\n      getDAta();\r\n    }\r\n  }, [loginUser, dispatch]);\r\n\r\n  // Convert scripts to options for react-select\r\n  const scriptOptions: ScriptOption[] =allreport && allreport.map((report: any) => ({\r\n    value: report.id,\r\n    label: report.name,\r\n  }));\r\n\r\n  // Form validation schema\r\n  const validationSchema = Yup.object({\r\n    name: Yup.string().required(\"Name is required\"),\r\n    scripts: Yup.array().of(Yup.string()).min(1, \"At least one script must be selected\")\r\n  });\r\n\r\n  // Handle form submission\r\n  const handleSubmit = (values: any) => {\r\n\r\n    dispatch(mergereports({values:values,token:loginUser.access}));\r\n\r\n    handleClose(); // Close modal after submission\r\n  };\r\n\r\n  return (\r\n<Modal\r\n        size=\"lg\"\r\n        fullscreen=\"md-down\" \r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n      centered\r\n      show={show}\r\n      onHide={handleClose}\r\n    >\r\n      <Modal.Body\r\n        className=\"bg-light-green\"\r\n        style={{\r\n          borderRadius: \"25px\",\r\n          overflow: \"hidden\",\r\n        }}\r\n      >\r\n        <h5>Merge Reports</h5>\r\n\r\n        <Formik\r\n          initialValues={{ name: '', reports: [] }}\r\n          validationSchema={validationSchema}\r\n          onSubmit={handleSubmit}\r\n        >\r\n          {({ setFieldValue, values }) => (\r\n            <Form>\r\n              <div className=\"mb-3\">\r\n                <div className=\"row mx-0 px-3\">\r\n                  <div className=\"col-12 m-0\">\r\n                    <label htmlFor=\"name\" className=\"form-label\">\r\n                      Name\r\n                    </label>\r\n                    <Field\r\n                      id=\"name\"\r\n                      name=\"name\"\r\n                      className=\"form-control m-0\"\r\n                      required\r\n                    />\r\n                    <ErrorMessage name=\"name\" component=\"div\" className=\"text-danger\" />\r\n                  </div>\r\n\r\n                  <div className=\"col-12\">\r\n                    <label htmlFor=\"scripts\" className=\"form-label\">\r\n                    Reports\r\n                    </label>\r\n                    <Select\r\n                      id=\"reports\"\r\n                      name=\"reports\"\r\n                      isMulti\r\n                      options={scriptOptions}\r\n                      onChange={(selectedOptions: MultiValue<ScriptOption> | null) => {\r\n                        const values = selectedOptions ? selectedOptions.map((option) => option.value) : [];\r\n                        setFieldValue(\"reports\", values);\r\n                      }}\r\n                      // value={scriptOptions.filter((option) => values.scripts.includes(option.value))}\r\n                      placeholder=\"Select Scripts\"\r\n                    />\r\n                    <ErrorMessage name=\"scripts\" component=\"div\" className=\"text-danger\" />\r\n                  </div>\r\n\r\n                  <div className=\"col-12 row justify-content-evenly m-0\">\r\n                    <button\r\n                      onClick={handleClose}\r\n                      className=\"btn btn-dark col-5 px-3 fw-bold\"\r\n                      type=\"button\"\r\n                    >\r\n                      Close\r\n                    </button>\r\n                    <button\r\n                      type=\"submit\"\r\n                      className=\"btn btn-dark col-5 px-3 fw-bold\"\r\n                    >\r\n                      Create               \r\n\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </Form>\r\n          )}\r\n        </Formik>\r\n      </Modal.Body>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nexport default CreateReports;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"../../assest/css/AllScript.css\";\r\nimport Icon from \"../../Comopnent/ui/icon/Icon\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ActiveRoute } from \"../../Menu\";\r\nimport MergeReports from \"../../Comopnent/ui/Modals/MergeReports/MergeReports\";\r\nimport { GetAllreports } from \"../../Redux/Report/Slice\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport useSortableData from \"../../customHook/useSortable\";\r\nimport Loader from \"../../Comopnent/ui/Loader\";\r\nimport CreateReports from \"../../Comopnent/ui/Modals/CreateReports/ModalReports\";\r\nimport DateFormatter from \"../../customHook/useTImeformnt\";\r\n\r\nconst Report = () => {\r\n  const dispatch = useDispatch();\r\n  const [loginUser, setLoginUser] = useState<any>(null);\r\n  const store: any = useSelector((i) => i);\r\n  const { loading } = store?.report;\r\n  const allreport = store?.report?.reports?.results; \r\n  const { items, requestSort, getClassNamesFor } = useSortableData(allreport || []);\r\n  useEffect(() => {\r\n    const storedLoginUser = localStorage.getItem(\"login\");\r\n    if (storedLoginUser) {\r\n      setLoginUser(JSON.parse(storedLoginUser));\r\n    }\r\n  }, []);\r\n  useEffect(() => {\r\n    if(loginUser){\r\n\r\n      const getDAta = async () => {\r\n        try {\r\n          await dispatch(GetAllreports({ token: loginUser?.access }));\r\n        } catch (error) {\r\n          console.log(error);\r\n      }\r\n    };\r\n    getDAta();\r\n  }\r\n  }, [loginUser]);\r\n\r\n \r\n\r\n \r\n\r\n  const [show, setShow] = useState(false);\r\n  const [mergeshow, setShowmerges] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => {\r\n    setShow(true);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mx-4\">\r\n      <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3\">\r\n        <h1 className=\"h1 fw-bold\">Reports </h1>\r\n \r\n    \r\n \r\n        <div className=\"btn-toolbar mb-2 mb-md-0\">\r\n        {/* <button\r\n            onClick={handleShow}\r\n            type=\"button\"\r\n            className=\"btn icon-button my-1 mx-2\"\r\n          >\r\n            <Icon icon=\"Add\" size=\"20px\" />\r\n            <span>Create</span>\r\n          </button>*/}\r\n          <button \r\n            onClick={()=>setShowmerges(true)}\r\n            type=\"button\"\r\n            className=\"btn icon-button my-1 mx-2\"\r\n          >\r\n            <Icon icon=\"AddChart\" size=\"20px\" />\r\n            <span>Merge</span>\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div>\r\n        {items.length > 0 ? (\r\n          <div style={{overflow: 'auto'}} id=\"customReportForm\" >\r\n    <table className=\"table\" style={{minWidth:'1000px'}}>\r\n          <thead>\r\n            <tr className=\"fw-bold mb-2 p-2\">\r\n              <th scope=\"col\" className=\"col-1\">\r\n                <h5>Sr no.</h5>\r\n              </th>\r\n              <th scope=\"col\" className=\"col-7\">\r\n                <h5>Report Name</h5>\r\n              </th>\r\n              <th scope=\"col\" className=\"col-2 text-center mx-auto\">\r\n                Created\r\n              </th>\r\n              <th scope=\"col\" className=\"col-2 text-center mx-auto\">\r\n                Last Updated\r\n              </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody id=\"scriptsCheckboxes\">\r\n            {items.map((script: any, index: any) => (\r\n                  <>\r\n              <tr key={script.id} className=\"table-card rounded-3 bg-light-green mb-2 p-3\">\r\n                <td className=\"col-1 fw-bold fs-6\">{index + 1}</td>\r\n                <td className=\"col-7 fw-bold fs-6\">\r\n                  <Link\r\n                    to={`/account/ReportDetails/${script.id}`}\r\n                    className=\"text-decoration-none text-black\"\r\n                    >\r\n                    {script.name}\r\n                  </Link>\r\n                </td>\r\n                <td className=\"col-2 text-center mx-auto\">\r\n                  <DateFormatter isoString={script.created} />\r\n                </td>\r\n                <td className=\"col-2 text-center mx-auto\">\r\n                  <DateFormatter isoString={script.last_updated} />\r\n                </td>\r\n              </tr>\r\n              <tr style={{height:'10px'}}>\r\n\r\n              </tr>\r\n              </>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n      \r\n        ) : (\r\n         <Loader/>\r\n        )}\r\n      </div>\r\n   \r\n\r\n      <MergeReports show={mergeshow} handleClose={()=>setShowmerges(false)}  allreport={allreport}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Report;\r\n"],"names":["items","config","arguments","length","undefined","sortConfig","setSortConfig","useState","useMemo","sortableItems","sort","a","b","aValue","key","bValue","isNaN","Date","parse","dateA","dateB","direction","requestSort","getClassNamesFor","_ref","isoString","formattedDateTime","toLocaleString","_jsx","_Fragment","children","_store$script","_store$script$Scripts","show","handleClose","allreport","dispatch","useDispatch","store","useSelector","i","loginUser","setLoginUser","script","Scripts","results","useEffect","storedLoginUser","localStorage","getItem","JSON","async","GetAllScripts","token","access","error","console","log","getDAta","scriptOptions","map","report","value","id","label","name","validationSchema","Yup","required","scripts","of","min","Modal","size","fullscreen","centered","onHide","_jsxs","Body","className","style","borderRadius","overflow","Formik","initialValues","reports","onSubmit","values","mergereports","_ref2","setFieldValue","Form","htmlFor","Field","ErrorMessage","component","Select","isMulti","options","onChange","selectedOptions","option","placeholder","onClick","type","Report","_store$report","_store$report$reports","loading","useSortableData","GetAllreports","setShow","mergeshow","setShowmerges","Icon","icon","minWidth","scope","index","Link","to","DateFormatter","created","last_updated","height","Loader","MergeReports"],"sourceRoot":""}