{"version":3,"file":"static/js/74.77940bd0.chunk.js","mappings":"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","sources":["Comopnent/ui/Loader.tsx","customHook/useSortable.tsx","Comopnent/ui/Modals/CreateReports/ModalReports.tsx","pages/Reports/Reports.tsx"],"sourcesContent":["import React from 'react'\n\nconst Loader = () => {\n  return (\n \n      \n <div className=\"loader-center\"> <div className=\"  spinner-border text-dark\" role=\"status\">\n         </div></div>\n \n  )\n}\n\nexport default Loader\n","import { useMemo, useState } from 'react';\n\ninterface SortConfig {\n\tkey: string;\n\tdirection: 'ascending' | 'descending';\n}\n\nconst useSortableData = (items: any[], config: SortConfig | null = null) => {\n\tconst [sortConfig, setSortConfig] = useState<SortConfig | null>(config);\n\n\tconst sortedItems = useMemo(() => {\n\t\tconst sortableItems = [...items];\n\t\tif (sortConfig !== null) {\n\t\t\tsortableItems.sort((a, b) => {\n\t\t\t\tconst aValue = a[sortConfig.key];\n\t\t\t\tconst bValue = b[sortConfig.key];\n\n\t\t\t\tconst isDate = !isNaN(Date.parse(aValue)) && !isNaN(Date.parse(bValue));\n\n\t\t\t\tif (isDate) {\n\t\t\t\t\tconst dateA = new Date(aValue);\n\t\t\t\t\tconst dateB = new Date(bValue);\n\n\t\t\t\t\tif (dateA < dateB) {\n\t\t\t\t\t\treturn sortConfig.direction === 'ascending' ? -1 : 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (dateA > dateB) {\n\t\t\t\t\t\treturn sortConfig.direction === 'ascending' ? 1 : -1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (aValue < bValue) {\n\t\t\t\t\t\treturn sortConfig.direction === 'ascending' ? -1 : 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (aValue > bValue) {\n\t\t\t\t\t\treturn sortConfig.direction === 'ascending' ? 1 : -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t}\n\t\treturn sortableItems;\n\t}, [items, sortConfig]);\n\n\tconst requestSort = (key: string) => {\n\t\tlet direction: 'ascending' | 'descending' = 'ascending';\n\t\tif (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n\t\t\tdirection = 'descending';\n\t\t}\n\t\tsetSortConfig({ key, direction });\n\t};\n\n\tconst getClassNamesFor = (key: string) => {\n\t\tif (!sortConfig) {\n\t\t\treturn 'd-none';\n\t\t}\n\t\treturn sortConfig.key === key ? sortConfig.direction : 'd-none';\n\t};\n\n\treturn { items: sortedItems, requestSort, getClassNamesFor, sortConfig };\n};\n\nexport default useSortableData;\n","import { FC, useEffect, useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GetAllScripts } from \"../../../../Redux/Script/ScriptSlice\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select, { MultiValue } from \"react-select\";\nimport { Createreports } from \"../../../../Redux/Report/Slice\";\n\n// Define type for the script option\ninterface ScriptOption {\n  value: string;\n  label: string;\n}\n\ninterface CreateReportsProps {\n  show: boolean;\n  handleClose: () => void;\n}\n\nconst CreateReports: FC<CreateReportsProps> = ({ show, handleClose }) => {\n  const dispatch = useDispatch();\n  const store: any = useSelector((i) => i);\n  const allscripts = store?.script?.Scripts?.results || [];\n  const [loginUser, setLoginUser] = useState<any>(null);\n\n  useEffect(() => {\n    const storedLoginUser = localStorage.getItem(\"login\");\n    if (storedLoginUser) {\n      setLoginUser(JSON.parse(storedLoginUser));\n    }\n  }, []);\n\n  useEffect(() => {\n    const getDAta = async () => {\n      try {\n        await dispatch(GetAllScripts({ token: loginUser?.access }));\n      } catch (error) {\n        ////console.log(error);\n      }\n    };\n    getDAta();\n  }, [loginUser, dispatch]);\n\n  // Convert scripts to options for react-select\n  const scriptOptions: ScriptOption[] = allscripts.map((script: any) => ({\n    value: script.id,\n    label: script.name,\n  }));\n\n  // Form validation schema\n  const validationSchema = Yup.object({\n    name: Yup.string().required(\"Name is required\"),\n    scripts: Yup.array().of(Yup.string()).min(1, \"At least one script must be selected\")\n  });\n\n  // Handle form submission\n  const handleSubmit = (values: any) => {\n    // Handle form submission here\n    ////console.log(JSON.stringify(values));\n    // Example: dispatch action to create report\n    dispatch(Createreports({values:values,token:loginUser.access}));\n\n    handleClose(); // Close modal after submission\n  };\n\n  return (\n    <Modal\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      show={show}\n      onHide={handleClose}\n    >\n      <Modal.Body\n        className=\"bg-light-green\"\n        style={{\n          borderRadius: \"25px\",\n          overflow: \"hidden\",\n        }}\n      >\n        <h5>Create Reports</h5>\n\n        <Formik\n          initialValues={{ name: '', scripts: [] }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ setFieldValue, values }) => (\n            <Form>\n              <div className=\"mb-3\">\n                <div className=\"row mx-0 px-3\">\n                  <div className=\"col-12 m-0\">\n                    <label htmlFor=\"name\" className=\"form-label\">\n                      Name\n                    </label>\n                    <Field\n                      id=\"name\"\n                      name=\"name\"\n                      className=\"form-control m-0\"\n                      required\n                    />\n                    <ErrorMessage name=\"name\" component=\"div\" className=\"text-danger\" />\n                  </div>\n\n                  <div className=\"col-12\">\n                    <label htmlFor=\"scripts\" className=\"form-label\">\n                      Scripts\n                    </label>\n                    <Select\n                      id=\"scripts\"\n                      name=\"scripts\"\n                      isMulti\n                      options={scriptOptions}\n                      onChange={(selectedOptions: MultiValue<ScriptOption> | null) => {\n                        const values = selectedOptions ? selectedOptions.map((option) => option.value) : [];\n                        setFieldValue(\"scripts\", values);\n                      }}\n                      // value={scriptOptions.filter((option) => values.scripts.includes(option.value))}\n                      placeholder=\"Select Scripts\"\n                    />\n                    <ErrorMessage name=\"scripts\" component=\"div\" className=\"text-danger\" />\n                  </div>\n\n                  <div className=\"col-12 row justify-content-evenly m-0\">\n                    <button\n                      onClick={handleClose}\n                      className=\"btn btn-dark col-5 px-3 fw-bold\"\n                      type=\"button\"\n                    >\n                      Close\n                    </button>\n                    <button\n                      type=\"submit\"\n                      className=\"btn btn-dark col-5 px-3 fw-bold\"\n                    >\n                      Create\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default CreateReports;\n","import React, { useEffect, useState } from \"react\";\nimport \"../../assest/css/AllScript.css\";\nimport Icon from \"../../Comopnent/ui/icon/Icon\";\nimport { Link } from \"react-router-dom\";\nimport { ActiveRoute } from \"../../Menu\";\nimport MergeReports from \"../../Comopnent/ui/Modals/MergeReports/MergeReports\";\nimport { GetAllreports } from \"../../Redux/Report/Slice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useSortableData from \"../../customHook/useSortable\";\nimport Loader from \"../../Comopnent/ui/Loader\";\nimport CreateReports from \"../../Comopnent/ui/Modals/CreateReports/ModalReports\";\n\nconst Report = () => {\n  const [category, setCategory] = useState(\"-1\");\n  const [subCategory, setSubCategory] = useState(\"-1\");\n  const [subSubCategory, setSubSubCategory] = useState(\"-1\");\n\n  const dispatch = useDispatch();\n\n  const [loginUser, setLoginUser] = useState<any>(null);\n\n  const store: any = useSelector((i) => i);\n\n  const { loading } = store?.report;\n  const allreport = store?.report?.reports?.results;\n  const [selectedreport, setSelectedreport] = useState([]);\n  //console.log(allreport);\n  const { items, requestSort, getClassNamesFor } = useSortableData(allreport || []);\n  useEffect(() => {\n    const storedLoginUser = localStorage.getItem(\"login\");\n    if (storedLoginUser) {\n      setLoginUser(JSON.parse(storedLoginUser));\n    }\n  }, []);\n  useEffect(() => {\n    const getDAta = async () => {\n      try {\n        await dispatch(GetAllreports({ token: loginUser?.access }));\n      } catch (error) {\n        //console.log(error);\n      }\n    };\n    getDAta();\n  }, [loginUser]);\n\n \n\n \n\n  const [show, setShow] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => {\n    setShow(true);\n  };\n\n  return (\n    <div className=\"mx-4\">\n      <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3\">\n        <h1 className=\"h1 fw-bold\">Reports </h1>\n \n    \n \n        <div className=\"btn-toolbar mb-2 mb-md-0\">\n        <button\n            onClick={handleShow}\n            type=\"button\"\n            className=\"btn icon-button my-1 mx-2\"\n          >\n            <Icon icon=\"Add\" size=\"20px\" />\n            <span>Create</span>\n          </button>\n          <button\n            onClick={handleShow}\n            type=\"button\"\n            className=\"btn icon-button my-1 mx-2\"\n          >\n            <Icon icon=\"AddChart\" size=\"20px\" />\n            <span>Merge</span>\n          </button>\n        </div>\n      </div>\n      <div>\n        {items.length > 0 ? (\n          <form method=\"post\" id=\"customReportForm\">\n            <div className=\"row mb-2 p-2 fw-bold w-100\">\n            <div className=\"col-1\">\n                <h5>Sr no.</h5>\n              </div>\n              <div className=\"col-7\">\n                <h5>Report Name</h5>\n              </div>\n\n              <div className=\"col-2 mx-auto text-center\">Created</div>\n              <div className=\"col-2 mx-auto text-center\">Last updated</div>\n            </div>\n            <div id=\"scriptsCheckboxes\">\n              {items.map((script: any,index:any) => (\n                <Link\n                  to={`/account/ReportDetails/${script.id}`}\n                  className=\"text-decoration-none text-black\"\n                  key={script.id}\n                >\n                  <div className=\"row mb-2 p-3 table-card rounded-3 w-100 bg-light-green\">\n                  <div className=\"col-1\">\n                      <span className=\"fw-bold fs-6\">{index+1}</span>\n                    </div>\n                    <div className=\"col-7\">\n                      <span className=\"fw-bold fs-6\">{script.name}</span>\n                    </div>\n\n                    <div className=\"col-2 mx-auto text-center\">\n                      {script.created}\n                    </div>\n                    <div className=\"col-2 mx-auto text-center\">\n                      {script.last_updated}\n                    </div>\n                  </div>\n                </Link>\n              ))}\n            </div>\n          </form>\n        ) : (\n         <Loader/>\n        )}\n      </div>\n      <CreateReports show={show} handleClose={handleClose} />\n\n      {/* <MergeReports show={show} handleClose={handleClose} /> */}\n    </div>\n  );\n};\n\nexport default Report;\n"],"names":["Loader","_jsxs","className","children","_jsx","role","items","config","arguments","length","undefined","sortConfig","setSortConfig","useState","useMemo","sortableItems","sort","a","b","aValue","key","bValue","isNaN","Date","parse","dateA","dateB","direction","requestSort","getClassNamesFor","_ref","_store$script","_store$script$Scripts","show","handleClose","dispatch","useDispatch","store","useSelector","i","allscripts","script","Scripts","results","loginUser","setLoginUser","useEffect","storedLoginUser","localStorage","getItem","JSON","async","GetAllScripts","token","access","error","getDAta","scriptOptions","map","value","id","label","name","validationSchema","Yup","required","scripts","of","min","Modal","size","centered","onHide","Body","style","borderRadius","overflow","Formik","initialValues","onSubmit","values","Createreports","_ref2","setFieldValue","Form","htmlFor","Field","ErrorMessage","component","Select","isMulti","options","onChange","selectedOptions","option","placeholder","onClick","type","Report","_store$report","_store$report$reports","category","setCategory","subCategory","setSubCategory","subSubCategory","setSubSubCategory","loading","report","allreport","reports","selectedreport","setSelectedreport","useSortableData","GetAllreports","setShow","handleShow","Icon","icon","method","index","Link","to","created","last_updated","CreateReports"],"sourceRoot":""}