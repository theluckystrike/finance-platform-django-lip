{"version":3,"file":"static/js/571.c325015a.chunk.js","mappings":"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","sources":["Comopnent/ui/Modals/NewCategoryModal/NewCategoryModal.tsx","Comopnent/Charts/TreeChart.tsx","pages/UploadScript/CategoryManger.tsx"],"sourcesContent":["import { FC, useState, useEffect } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useRemoveMutation, useUpdateMutation } from \"../../../../Redux/CategoryQuery\";\nimport { log } from \"console\";\nimport useToast from \"../../../../customHook/toast\";\n\ninterface NewCategoryModalProps {\n  show: boolean;\n  handleClose: () => void;\n  selected: string;\n  editingCategory: any | null;\n  token:any;\n  data:any;\n  selectedPERnt:any;\n}\n\nconst NewCategoryModal: FC<NewCategoryModalProps> = ({\n  show,\n  selected,\n  handleClose,\n  data,\n  editingCategory,\n  token,\n  selectedPERnt\n}) => {\n  const navigate = useNavigate();\n  const [update, update_res] =\n  useUpdateMutation();\n  const [remove, delete_res] =\n  useRemoveMutation();\n\n const handleToast=useToast()\n  \n  const [categoryName, setCategoryName] = useState(selected);\n  const [parentCategory, setParentCategory] = useState(selectedPERnt);\n  const [isEditing, setIsEditing] = useState(false);\n////console.log(editingCategory);\n\n  useEffect(() => {\n    if (editingCategory) {\n      setCategoryName(editingCategory.name);\n      setParentCategory(selectedPERnt)\n      setIsEditing(true);\n    } else {\n      setCategoryName(\"\");\n      setIsEditing(false);\n    }\n  }, [editingCategory, selected]);\n\n  const handleSave = async() => {\n   await update({token:token.access,id:editingCategory.id, data:{\n      name:categoryName,\n      parent_category:parentCategory.id\n    } })\n\n    handleToast.SuccessToast(`Category updated successfully`);\n\n    handleClose();\n  };\n\n  const handleDelete =async () => {\n  await  remove({token:token.access,id:editingCategory.id  })\n  handleToast.SuccessToast(`Category delete successfully`);\n\n    handleClose();\n  };\n\n  return (\n    <Modal\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      show={show}\n      onHide={handleClose}\n    >\n      <Modal.Body\n        className=\"bg-light-green\"\n        style={{ borderRadius: \"25px\", overflow: \"hidden\" }}\n      >\n        <h4>{isEditing ? \"Edit Category\" : \"Create a Category\"}</h4>\n        <form method=\"post\" encType=\"multipart/form-data\">\n          <div className=\"mb-3\">\n            <div className=\"row mx-0 px-3\">\n              <div className=\"col-12 m-0\">\n                <label htmlFor=\"category\" className=\"form-label\">\n                  Category Name\n                </label>\n                <input\n                  id=\"category\"\n                  name=\"category\"\n                  className=\"form-control m-0\"\n                  value={categoryName}\n                  onChange={(e) => setCategoryName(e.target.value)}\n                  required\n                />\n              </div>\n              <div className=\"col-12\">\n                  <label htmlFor=\"parent_category\" className=\"form-label\">\n                    parent_category Category\n                  </label>\n\n                  <div className=\"dropdown\">\n                    <input\n                      type=\"text\"\n                      placeholder=\"All\"\n                      value={parentCategory.name}\n                      readOnly\n                    />\n                    <div\n                      className=\"dropdown-content\"\n                      style={{ height: \"200px\", overflow: \"auto\" }}\n                    >\n                       <span className=\"h6  \"  >\n                            <span\n                              className=\"hover-span text-muted\"\n                              onClick={() =>\n                                setParentCategory({name:'',id:''})\n                              }\n                            >\n                             Null\n                            </span>\n                           \n                          </span>\n                      {data.length > 0 &&\n                        data.map((item: any, index: any) => (\n                          <span className=\"h6  \" key={item.name}>\n                            <span\n                              className=\"hover-span \"\n                              onClick={() =>\n                                setParentCategory(item)\n                              }\n                            >\n                              {item.name}\n                            </span>\n                          \n                          </span>\n                        ))}\n                    </div>\n                  </div>\n                </div>\n              <div className=\"col-12 row justify-content-evenly m-0\">\n                <label\n                  style={{ height: \"33px\" }}\n                  htmlFor=\"category\"\n                  className=\"invisible\"\n                >\n                  Actions\n                </label>\n                {isEditing && (\n                  <button\n                    onClick={handleDelete}\n                    className=\"btn btn-danger col-3 px-3 fw-bold\"\n                    type=\"button\"\n                  >\n                    Delete\n                  </button>\n                )}\n                <button\n                  onClick={handleClose}\n                  className=\"btn btn-light border border-2 border-dark col-3 px-3 fw-bold\"\n                  type=\"button\"\n                >\n                  Close\n                </button>\n                <button\n                  onClick={handleSave}\n                  className=\"btn btn-dark col-3 px-3 fw-bold\"\n                  type=\"button\"\n                >\n                  Save\n                </button>\n              </div>\n            </div>\n          </div>\n        </form>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default NewCategoryModal;\n","import React, { useState } from \"react\";\nimport { FaEdit } from \"react-icons/fa\";\nimport { Categoryarray2 } from \"../../DummyData/TableData\";\nimport NewCategoryModal from \"../ui/Modals/NewCategoryModal/NewCategoryModal\";\n\nconst RenderTree = (data: any,token:any, level = 0) => {\n  const [expandedCategories, setExpandedCategories] = useState<string[]>([]);\n  const [selected, setSelected] = useState(\"\");\n  const [selectedPERnt, setSelectedPREnt] = useState(\"\");\n  const [show, setShow] = useState(false);\n  const [editingCategory, setEditingCategory] = useState<string | null>(null);\n\n  const handleClose = () => {\n    setShow(false);\n    setEditingCategory(null);\n  };\n\n  const handleShow = (value: any) => {\n    setSelected(value);\n    setShow(true);\n  };\n\n  const toggleExpand = (name: string) => {\n    setExpandedCategories(prev => \n      prev.includes(name) ? prev.filter(category => category !== name) : [...prev, name]\n    );\n  };\n\n  const startEditing = (name: any,value:any) => {\n    setEditingCategory(name);\n    setSelectedPREnt(value);\n    \n    handleShow(name);\n  };\n\n  return (\n    <>\n      <ul className=\"tree-class\">\n        {data.map((item: any, index: any) => (\n          <li key={index}>\n            <div>\n              <span\n                onClick={() => toggleExpand(item.name)}\n                style={{ cursor: 'pointer' }}\n              >\n                {item.name}\n                <FaEdit\n                  onClick={(e: any) => {\n                    e.stopPropagation();\n                    startEditing(item,{name:'',id:''});\n                  }}\n                  style={{ marginLeft: '8px', cursor: 'pointer' }}\n                />\n              </span>\n              {expandedCategories.includes(item.name) && item.subcategories && (\n                <ul>\n                  {item.subcategories.map((innerItem: any, innerIndex: any) => (\n                    <li key={innerIndex}>\n                      <span\n                        onClick={() => toggleExpand(innerItem.name)}\n                        style={{ cursor: 'pointer' }}\n                      >\n                        {innerItem.name}\n                        <FaEdit\n                          onClick={(e: any) => {\n                            e.stopPropagation();\n                            startEditing(innerItem,item );\n                          }}\n                          style={{ marginLeft: '8px', cursor: 'pointer' }}\n                        />\n                      </span>\n                      {expandedCategories.includes(innerItem.name) && innerItem.subcategories && (\n                        <ul>\n                          {innerItem.subcategories.map(\n                            (subinnerItem: any, subinnerIndex: any) => (\n                              <li key={subinnerIndex}>\n                                <span\n                                  onClick={() => startEditing({name:subinnerItem.name},innerItem )}\n                                  style={{ cursor: 'pointer' }}\n                                >\n                                  {subinnerItem.name}\n                                </span>\n                              </li>\n                            )\n                          )}\n                        </ul>\n                      )}\n                    </li>\n                  ))}\n                </ul>\n              )}\n            </div>\n          </li>\n        ))}\n      </ul>\n      <NewCategoryModal\n        show={show}\n        handleClose={handleClose}\n        selected={selected}\n        selectedPERnt={selectedPERnt}\n        editingCategory={editingCategory} \n        data={data}\n        token={token}\n      />\n    </>\n  );\n};\n\nconst CategoryTree = ({categoryFilter,token}:any) => {\n  return (\n    <div className=\"category-tree mx-auto w-25\">\n      <h3>Category Tree</h3>\n      {RenderTree(categoryFilter,token)}\n    </div>\n  );\n};\n\nexport default CategoryTree;\n","import React, { useEffect, useState } from 'react'\nimport OrgChartTree from '../../Comopnent/Charts/TreeChart'\nimport { useNavigate } from 'react-router-dom'\nimport Icon from '../../Comopnent/ui/icon/Icon'\nimport { useGetAllCategoryQuery } from '../../Redux/CategoryQuery'\n \n\nconst CategoryManger = () => {\n  \n  \n  const [loginUser, setLoginUser] = useState<any>(JSON.parse(localStorage.getItem(\"login\") as any));\n  \n  // Effect to retrieve loginUser from localStorage on component mount\n  useEffect(() => {\n    const storedLoginUser = localStorage.getItem(\"login\");\n    // Check if storedLoginUser is not null before parsing\n    if (storedLoginUser) {\n      setLoginUser(JSON.parse(storedLoginUser)); // Set the loginUser state if it's available\n    }\n  }, []);\n \n  \n  const Navigate =useNavigate()\n  const { data: AllCategory, isError } = useGetAllCategoryQuery({ token: loginUser.access });\n  const categoryData =  AllCategory?.results || [];\n  const [categoryFilter,setCategoryFilter ]=useState<any>([])\nuseEffect(() => {\n  const categoryMap: any = {};\n  // Initialize categories in the map\n  categoryData.forEach((cat: any) => {\n    categoryMap[cat.id] = { ...cat, subcategories: [] };\n  });\n  // Populate the subcategories\n  categoryData.forEach((cat: any) => {\n    if (cat.parent_category === null) {\n      // Root category, do nothing here\n    } else {\n      // Find the parent category and add the current category as a subcategory\n      const parent:any = Object.values(categoryMap).find(\n        (parentCat: any) => parentCat.id === cat.parent_category\n      );\n      if (parent) {\n        parent.subcategories.push(categoryMap[cat.id]);\n      }\n    }\n  });\n\n  // Extract root categories\n  const structuredCategories = Object.values(categoryMap).filter(\n    (cat: any) => cat.parent_category === null\n  );\n //console.log(categoryData,'categoryData');\n \n\n  setCategoryFilter(structuredCategories);\n\n}, [categoryData]);\n\n  return (\n    <div className='m-4'>\n         <div className=\"d-flex justify-content-start flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-2 text-center\">\n       <button className='btn mb-3' onClick={()=>Navigate(-1)}><Icon icon='ArrowBack'size='45px'  color=\"dark\"/></button> <h3 className=\"h1 fw-bold\">Category manager</h3>\n      </div>\n        <OrgChartTree categoryFilter={categoryFilter} token={loginUser}/>\n    </div>\n  )\n}\n\nexport default CategoryManger"],"names":["_ref","show","selected","handleClose","data","editingCategory","token","selectedPERnt","useNavigate","update","update_res","useUpdateMutation","remove","delete_res","useRemoveMutation","handleToast","useToast","categoryName","setCategoryName","useState","parentCategory","setParentCategory","isEditing","setIsEditing","useEffect","name","_jsx","Modal","size","centered","onHide","children","_jsxs","Body","className","style","borderRadius","overflow","method","encType","htmlFor","id","value","onChange","e","target","required","type","placeholder","readOnly","height","onClick","length","map","item","index","async","access","SuccessToast","parent_category","RenderTree","expandedCategories","setExpandedCategories","setSelected","setSelectedPREnt","setShow","setEditingCategory","toggleExpand","prev","includes","filter","category","startEditing","handleShow","_Fragment","cursor","FaEdit","stopPropagation","marginLeft","subcategories","innerItem","innerIndex","subinnerItem","subinnerIndex","NewCategoryModal","categoryFilter","CategoryManger","loginUser","setLoginUser","JSON","parse","localStorage","getItem","storedLoginUser","Navigate","AllCategory","isError","useGetAllCategoryQuery","categoryData","results","setCategoryFilter","categoryMap","forEach","cat","parent","Object","values","find","parentCat","push","structuredCategories","Icon","icon","color","OrgChartTree"],"sourceRoot":""}