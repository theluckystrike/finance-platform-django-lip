{"version":3,"file":"static/js/682.03dff020.chunk.js","mappings":"kIAOA,MAsDA,EAtDwB,SAACA,GAAoD,IAAtCC,EAAyBC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,KAClE,MAAOG,EAAYC,IAAiBC,EAAAA,EAAAA,UAA4BN,GAkDhE,MAAO,CAAED,OAhDWQ,EAAAA,EAAAA,UAAQ,KAC3B,MAAMC,EAAgB,IAAIT,GA6B1B,OA5BmB,OAAfK,GACHI,EAAcC,MAAK,CAACC,EAAGC,KACtB,MAAMC,EAASF,EAAEN,EAAWS,KACtBC,EAASH,EAAEP,EAAWS,KAI5B,IAFgBE,MAAMC,KAAKC,MAAML,MAAaG,MAAMC,KAAKC,MAAMH,IAEnD,CACX,MAAMI,EAAQ,IAAIF,KAAKJ,GACjBO,EAAQ,IAAIH,KAAKF,GAEvB,GAAII,EAAQC,EACX,MAAgC,cAAzBf,EAAWgB,WAA6B,EAAI,EAEpD,GAAIF,EAAQC,EACX,MAAgC,cAAzBf,EAAWgB,UAA4B,GAAK,CAErD,KAAO,CACN,GAAIR,EAASE,EACZ,MAAgC,cAAzBV,EAAWgB,WAA6B,EAAI,EAEpD,GAAIR,EAASE,EACZ,MAAgC,cAAzBV,EAAWgB,UAA4B,GAAK,CAErD,CACA,OAAO,CAAC,IAGHZ,CAAa,GAClB,CAACT,EAAOK,IAiBkBiB,YAfRR,IACpB,IAAIO,EAAwC,YACxChB,GAAcA,EAAWS,MAAQA,GAAgC,cAAzBT,EAAWgB,YACtDA,EAAY,cAEbf,EAAc,CAAEQ,MAAKO,aAAY,EAUQE,iBAPhBT,GACpBT,GAGEA,EAAWS,MAAQA,EAAMT,EAAWgB,UAFnC,SAKmDhB,aAC7D,C,uDCzDA,MAWA,EAXsBmB,IAAoB,IAAnB,UAAEC,GAAWD,EAElC,MAAME,EAAoB,IAAIT,KAAKQ,GAAWE,iBAE9C,OACEC,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACGJ,GACA,C,yKCYP,MAkIA,EAlI8CF,IAAsC,IAADO,EAAAC,EAAA,IAApC,KAAEC,EAAI,YAAEC,EAAW,UAACC,GAAWX,EAC5E,MAAMY,GAAWC,EAAAA,EAAAA,MACXC,GAAaC,EAAAA,EAAAA,KAAaC,GAAMA,KAE/BC,EAAWC,IADM,OAALJ,QAAK,IAALA,GAAa,QAARP,EAALO,EAAOK,cAAM,IAAAZ,GAAS,QAATC,EAAbD,EAAea,eAAO,IAAAZ,GAAtBA,EAAwBa,SACTtC,EAAAA,EAAAA,UAAc,QAEhDuC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAkBC,aAAaC,QAAQ,SACzCF,GACFL,EAAaQ,KAAKhC,MAAM6B,GAC1B,GACC,KAEHD,EAAAA,EAAAA,YAAU,KACR,GAAGL,EAAU,CAEKU,WACd,UACQf,GAASgB,EAAAA,EAAAA,IAAc,CAAEC,MAAgB,OAATZ,QAAS,IAATA,OAAS,EAATA,EAAWa,SACnD,CAAE,MAAOC,GACPC,QAAQC,IAAIF,EACd,GAEFG,EACF,IACC,CAACjB,EAAWL,IAGf,MAAMuB,EAA+BxB,GAAaA,EAAUyB,KAAKC,IAAW,CAC1EC,MAAOD,EAAOE,GACdC,MAAOH,EAAOI,SAIVC,EAAmBC,EAAAA,GAAW,CAClCF,KAAME,EAAAA,KAAaC,SAAS,oBAC5BC,QAASF,EAAAA,KAAYG,GAAGH,EAAAA,MAAcI,IAAI,EAAG,0CAW/C,OACE3C,EAAAA,EAAAA,KAAC4C,EAAAA,EAAK,CACJC,KAAK,KACL,kBAAgB,gCAChBC,UAAQ,EACRzC,KAAMA,EACN0C,OAAQzC,EAAYJ,UAEpB8C,EAAAA,EAAAA,MAACJ,EAAAA,EAAMK,KAAI,CACTC,UAAU,iBACVC,MAAO,CACLC,aAAc,OACdC,SAAU,UACVnD,SAAA,EAEFF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mBAEJF,EAAAA,EAAAA,KAACsD,EAAAA,GAAM,CACLC,cAAe,CAAElB,KAAM,GAAImB,QAAS,IACpClB,iBAAkBA,EAClBmB,SA3BcC,IAEpBlD,GAASmD,EAAAA,EAAAA,IAAa,CAACD,OAAOA,EAAOjC,MAAMZ,EAAUa,UAErDpB,GAAa,EAuBgBJ,SAEtB0D,IAAA,IAAC,cAAEC,EAAa,OAAEH,GAAQE,EAAA,OACzB5D,EAAAA,EAAAA,KAAC8D,EAAAA,GAAI,CAAA5D,UACHF,EAAAA,EAAAA,KAAA,OAAKkD,UAAU,OAAMhD,UACnB8C,EAAAA,EAAAA,MAAA,OAAKE,UAAU,gBAAehD,SAAA,EAC5B8C,EAAAA,EAAAA,MAAA,OAAKE,UAAU,aAAYhD,SAAA,EACzBF,EAAAA,EAAAA,KAAA,SAAO+D,QAAQ,OAAOb,UAAU,aAAYhD,SAAC,UAG7CF,EAAAA,EAAAA,KAACgE,EAAAA,GAAK,CACJ7B,GAAG,OACHE,KAAK,OACLa,UAAU,mBACVV,UAAQ,KAEVxC,EAAAA,EAAAA,KAACiE,EAAAA,GAAY,CAAC5B,KAAK,OAAO6B,UAAU,MAAMhB,UAAU,oBAGtDF,EAAAA,EAAAA,MAAA,OAAKE,UAAU,SAAQhD,SAAA,EACrBF,EAAAA,EAAAA,KAAA,SAAO+D,QAAQ,UAAUb,UAAU,aAAYhD,SAAC,aAGhDF,EAAAA,EAAAA,KAACmE,EAAAA,GAAM,CACLhC,GAAG,UACHE,KAAK,UACL+B,SAAO,EACPC,QAAStC,EACTuC,SAAWC,IACT,MAAMb,EAASa,EAAkBA,EAAgBvC,KAAKwC,GAAWA,EAAOtC,QAAS,GACjF2B,EAAc,UAAWH,EAAO,EAGlCe,YAAY,oBAEdzE,EAAAA,EAAAA,KAACiE,EAAAA,GAAY,CAAC5B,KAAK,UAAU6B,UAAU,MAAMhB,UAAU,oBAGzDF,EAAAA,EAAAA,MAAA,OAAKE,UAAU,wCAAuChD,SAAA,EACpDF,EAAAA,EAAAA,KAAA,UACE0E,QAASpE,EACT4C,UAAU,kCACVyB,KAAK,SAAQzE,SACd,WAGDF,EAAAA,EAAAA,KAAA,UACE2E,KAAK,SACLzB,UAAU,kCAAiChD,SAC5C,oBAMF,QAIP,E,kCCtIZ,MA0HA,EA1He0E,KAAO,IAADC,EAAAC,EAGnB,MAAMtE,GAAWC,EAAAA,EAAAA,OAEVI,EAAWC,IAAgBnC,EAAAA,EAAAA,UAAc,MAE1C+B,GAAaC,EAAAA,EAAAA,KAAaC,GAAMA,KAEhC,QAAEmE,GAAiB,OAALrE,QAAK,IAALA,OAAK,EAALA,EAAOuB,OACrB1B,EAAiB,OAALG,QAAK,IAALA,GAAa,QAARmE,EAALnE,EAAOuB,cAAM,IAAA4C,GAAS,QAATC,EAAbD,EAAerB,eAAO,IAAAsB,OAAjB,EAALA,EAAwB7D,SACpC,MAAE7C,EAAK,YAAEsB,EAAW,iBAAEC,IAAqBqF,EAAAA,EAAAA,GAAgBzE,GAAa,KAC9EW,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAkBC,aAAaC,QAAQ,SACzCF,GACFL,EAAaQ,KAAKhC,MAAM6B,GAC1B,GACC,KACHD,EAAAA,EAAAA,YAAU,KACR,GAAGL,EAAU,CAEKU,WACd,UACQf,GAASyE,EAAAA,EAAAA,IAAc,CAAExD,MAAgB,OAATZ,QAAS,IAATA,OAAS,EAATA,EAAWa,SACnD,CAAE,MAAOC,GACPC,QAAQC,IAAIF,EAChB,GAEFG,EACF,IACG,CAACjB,IAMJ,MAAOR,EAAM6E,IAAWvG,EAAAA,EAAAA,WAAS,IAC1BwG,EAAWC,IAAiBzG,EAAAA,EAAAA,WAAS,GAM5C,OACEqE,EAAAA,EAAAA,MAAA,OAAKE,UAAU,OAAMhD,SAAA,EACnB8C,EAAAA,EAAAA,MAAA,OAAKE,UAAU,4FAA2FhD,SAAA,EACxGF,EAAAA,EAAAA,KAAA,MAAIkD,UAAU,aAAYhD,SAAC,cAI3BF,EAAAA,EAAAA,KAAA,OAAKkD,UAAU,2BAA0BhD,UASvC8C,EAAAA,EAAAA,MAAA,UACE0B,QAASA,IAAIU,GAAc,GAC3BT,KAAK,SACLzB,UAAU,4BAA2BhD,SAAA,EAErCF,EAAAA,EAAAA,KAACqF,EAAAA,EAAI,CAACC,KAAK,WAAWzC,KAAK,UAC3B7C,EAAAA,EAAAA,KAAA,QAAAE,SAAM,mBAIZF,EAAAA,EAAAA,KAAA,OAAAE,SACG9B,EAAMG,OAAS,GACdyE,EAAAA,EAAAA,MAAA,QAAMuC,OAAO,OAAOpD,GAAG,mBAAkBjC,SAAA,EACvC8C,EAAAA,EAAAA,MAAA,OAAKE,UAAU,6BAA4BhD,SAAA,EAC3CF,EAAAA,EAAAA,KAAA,OAAKkD,UAAU,QAAOhD,UAClBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,cAENF,EAAAA,EAAAA,KAAA,OAAKkD,UAAU,QAAOhD,UACpBF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,mBAGNF,EAAAA,EAAAA,KAAA,OAAKkD,UAAU,4BAA2BhD,SAAC,aAC3CF,EAAAA,EAAAA,KAAA,OAAKkD,UAAU,4BAA2BhD,SAAC,qBAE7CF,EAAAA,EAAAA,KAAA,OAAKmC,GAAG,oBAAmBjC,SACxB9B,EAAM4D,KAAI,CAACjB,EAAYyE,KACtBxF,EAAAA,EAAAA,KAACyF,EAAAA,GAAI,CACHC,GAAI,0BAA0B3E,EAAOoB,KACrCe,UAAU,kCAAiChD,UAG3C8C,EAAAA,EAAAA,MAAA,OAAKE,UAAU,yDAAwDhD,SAAA,EACvEF,EAAAA,EAAAA,KAAA,OAAKkD,UAAU,QAAOhD,UAClBF,EAAAA,EAAAA,KAAA,QAAMkD,UAAU,eAAchD,SAAEsF,EAAM,OAExCxF,EAAAA,EAAAA,KAAA,OAAKkD,UAAU,QAAOhD,UACpBF,EAAAA,EAAAA,KAAA,QAAMkD,UAAU,eAAchD,SAAEa,EAAOsB,UAGzCrC,EAAAA,EAAAA,KAAA,OAAKkD,UAAU,4BAA2BhD,UAC1CF,EAAAA,EAAAA,KAAC2F,EAAAA,EAAa,CAAC9F,UAAWkB,EAAO6E,aAGjC5F,EAAAA,EAAAA,KAAA,OAAKkD,UAAU,4BAA2BhD,UAC1CF,EAAAA,EAAAA,KAAC2F,EAAAA,EAAa,CAAC9F,UAAWkB,EAAO8E,qBAf9B9E,EAAOoB,YAwBrBnC,EAAAA,EAAAA,KAAC8F,EAAAA,EAAM,OAKV9F,EAAAA,EAAAA,KAAC+F,EAAY,CAAC1F,KAAM8E,EAAW7E,YAAaA,IAAI8E,GAAc,GAAS7E,UAAWA,MAC9E,C","sources":["customHook/useSortable.tsx","customHook/useTImeformnt.jsx","Comopnent/ui/Modals/MergeReports/MergeReports.tsx","pages/Reports/Reports.tsx"],"sourcesContent":["import { useMemo, useState } from 'react';\n\ninterface SortConfig {\n\tkey: string;\n\tdirection: 'ascending' | 'descending';\n}\n\nconst useSortableData = (items: any[], config: SortConfig | null = null) => {\n\tconst [sortConfig, setSortConfig] = useState<SortConfig | null>(config);\n\n\tconst sortedItems = useMemo(() => {\n\t\tconst sortableItems = [...items];\n\t\tif (sortConfig !== null) {\n\t\t\tsortableItems.sort((a, b) => {\n\t\t\t\tconst aValue = a[sortConfig.key];\n\t\t\t\tconst bValue = b[sortConfig.key];\n\n\t\t\t\tconst isDate = !isNaN(Date.parse(aValue)) && !isNaN(Date.parse(bValue));\n\n\t\t\t\tif (isDate) {\n\t\t\t\t\tconst dateA = new Date(aValue);\n\t\t\t\t\tconst dateB = new Date(bValue);\n\n\t\t\t\t\tif (dateA < dateB) {\n\t\t\t\t\t\treturn sortConfig.direction === 'ascending' ? -1 : 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (dateA > dateB) {\n\t\t\t\t\t\treturn sortConfig.direction === 'ascending' ? 1 : -1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (aValue < bValue) {\n\t\t\t\t\t\treturn sortConfig.direction === 'ascending' ? -1 : 1;\n\t\t\t\t\t}\n\t\t\t\t\tif (aValue > bValue) {\n\t\t\t\t\t\treturn sortConfig.direction === 'ascending' ? 1 : -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t}\n\t\treturn sortableItems;\n\t}, [items, sortConfig]);\n\n\tconst requestSort = (key: string) => {\n\t\tlet direction: 'ascending' | 'descending' = 'ascending';\n\t\tif (sortConfig && sortConfig.key === key && sortConfig.direction === 'ascending') {\n\t\t\tdirection = 'descending';\n\t\t}\n\t\tsetSortConfig({ key, direction });\n\t};\n\n\tconst getClassNamesFor = (key: string) => {\n\t\tif (!sortConfig) {\n\t\t\treturn 'd-none';\n\t\t}\n\t\treturn sortConfig.key === key ? sortConfig.direction : 'd-none';\n\t};\n\n\treturn { items: sortedItems, requestSort, getClassNamesFor, sortConfig };\n};\n\nexport default useSortableData;\n","import React from 'react';\n\nconst DateFormatter = ({ isoString }) => {\n  // Format the date and time based on the locale\n  const formattedDateTime = new Date(isoString).toLocaleString();\n\n  return (\n    <>\n      {formattedDateTime}\n    </>\n  );\n};\n\nexport default DateFormatter;\n","import { FC, useEffect, useState } from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { GetAllScripts } from \"../../../../Redux/Script/ScriptSlice\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport Select, { MultiValue } from \"react-select\";\nimport { Createreports, mergereports } from \"../../../../Redux/Report/Slice\";\n\n// Define type for the script option\ninterface ScriptOption {\n  value: string;\n  label: string;\n}\n\ninterface CreateReportsProps {\n  show: boolean;\n  handleClose: () => void;\n  allreport:any\n}\n\nconst CreateReports: FC<CreateReportsProps> = ({ show, handleClose,allreport }) => {\n  const dispatch = useDispatch();\n  const store: any = useSelector((i) => i);\n  const allscripts = store?.script?.Scripts?.results || [];\n  const [loginUser, setLoginUser] = useState<any>(null);\n\n  useEffect(() => {\n    const storedLoginUser = localStorage.getItem(\"login\");\n    if (storedLoginUser) {\n      setLoginUser(JSON.parse(storedLoginUser));\n    }\n  }, []);\n\n  useEffect(() => {\n    if(loginUser){\n\n      const getDAta = async () => {\n        try {\n          await dispatch(GetAllScripts({ token: loginUser?.access }));\n        } catch (error) {\n          console.log(error);\n        }\n      };\n      getDAta();\n    }\n  }, [loginUser, dispatch]);\n\n  // Convert scripts to options for react-select\n  const scriptOptions: ScriptOption[] =allreport && allreport.map((report: any) => ({\n    value: report.id,\n    label: report.name,\n  }));\n\n  // Form validation schema\n  const validationSchema = Yup.object({\n    name: Yup.string().required(\"Name is required\"),\n    scripts: Yup.array().of(Yup.string()).min(1, \"At least one script must be selected\")\n  });\n\n  // Handle form submission\n  const handleSubmit = (values: any) => {\n\n    dispatch(mergereports({values:values,token:loginUser.access}));\n\n    handleClose(); // Close modal after submission\n  };\n\n  return (\n    <Modal\n      size=\"lg\"\n      aria-labelledby=\"contained-modal-title-vcenter\"\n      centered\n      show={show}\n      onHide={handleClose}\n    >\n      <Modal.Body\n        className=\"bg-light-green\"\n        style={{\n          borderRadius: \"25px\",\n          overflow: \"hidden\",\n        }}\n      >\n        <h5>Merge Reports</h5>\n\n        <Formik\n          initialValues={{ name: '', reports: [] }}\n          validationSchema={validationSchema}\n          onSubmit={handleSubmit}\n        >\n          {({ setFieldValue, values }) => (\n            <Form>\n              <div className=\"mb-3\">\n                <div className=\"row mx-0 px-3\">\n                  <div className=\"col-12 m-0\">\n                    <label htmlFor=\"name\" className=\"form-label\">\n                      Name\n                    </label>\n                    <Field\n                      id=\"name\"\n                      name=\"name\"\n                      className=\"form-control m-0\"\n                      required\n                    />\n                    <ErrorMessage name=\"name\" component=\"div\" className=\"text-danger\" />\n                  </div>\n\n                  <div className=\"col-12\">\n                    <label htmlFor=\"scripts\" className=\"form-label\">\n                    Reports\n                    </label>\n                    <Select\n                      id=\"reports\"\n                      name=\"reports\"\n                      isMulti\n                      options={scriptOptions}\n                      onChange={(selectedOptions: MultiValue<ScriptOption> | null) => {\n                        const values = selectedOptions ? selectedOptions.map((option) => option.value) : [];\n                        setFieldValue(\"reports\", values);\n                      }}\n                      // value={scriptOptions.filter((option) => values.scripts.includes(option.value))}\n                      placeholder=\"Select Scripts\"\n                    />\n                    <ErrorMessage name=\"scripts\" component=\"div\" className=\"text-danger\" />\n                  </div>\n\n                  <div className=\"col-12 row justify-content-evenly m-0\">\n                    <button\n                      onClick={handleClose}\n                      className=\"btn btn-dark col-5 px-3 fw-bold\"\n                      type=\"button\"\n                    >\n                      Close\n                    </button>\n                    <button\n                      type=\"submit\"\n                      className=\"btn btn-dark col-5 px-3 fw-bold\"\n                    >\n                      Create\n                    </button>\n                  </div>\n                </div>\n              </div>\n            </Form>\n          )}\n        </Formik>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default CreateReports;\n","import React, { useEffect, useState } from \"react\";\nimport \"../../assest/css/AllScript.css\";\nimport Icon from \"../../Comopnent/ui/icon/Icon\";\nimport { Link } from \"react-router-dom\";\nimport { ActiveRoute } from \"../../Menu\";\nimport MergeReports from \"../../Comopnent/ui/Modals/MergeReports/MergeReports\";\nimport { GetAllreports } from \"../../Redux/Report/Slice\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport useSortableData from \"../../customHook/useSortable\";\nimport Loader from \"../../Comopnent/ui/Loader\";\nimport CreateReports from \"../../Comopnent/ui/Modals/CreateReports/ModalReports\";\nimport DateFormatter from \"../../customHook/useTImeformnt\";\n\nconst Report = () => {\n \n\n  const dispatch = useDispatch();\n\n  const [loginUser, setLoginUser] = useState<any>(null);\n\n  const store: any = useSelector((i) => i);\n\n  const { loading } = store?.report;\n  const allreport = store?.report?.reports?.results; \n  const { items, requestSort, getClassNamesFor } = useSortableData(allreport || []);\n  useEffect(() => {\n    const storedLoginUser = localStorage.getItem(\"login\");\n    if (storedLoginUser) {\n      setLoginUser(JSON.parse(storedLoginUser));\n    }\n  }, []);\n  useEffect(() => {\n    if(loginUser){\n\n      const getDAta = async () => {\n        try {\n          await dispatch(GetAllreports({ token: loginUser?.access }));\n        } catch (error) {\n          console.log(error);\n      }\n    };\n    getDAta();\n  }\n  }, [loginUser]);\n\n \n\n \n\n  const [show, setShow] = useState(false);\n  const [mergeshow, setShowmerges] = useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => {\n    setShow(true);\n  };\n\n  return (\n    <div className=\"mx-4\">\n      <div className=\"d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3\">\n        <h1 className=\"h1 fw-bold\">Reports </h1>\n \n    \n \n        <div className=\"btn-toolbar mb-2 mb-md-0\">\n        {/* <button\n            onClick={handleShow}\n            type=\"button\"\n            className=\"btn icon-button my-1 mx-2\"\n          >\n            <Icon icon=\"Add\" size=\"20px\" />\n            <span>Create</span>\n          </button>*/}\n          <button \n            onClick={()=>setShowmerges(true)}\n            type=\"button\"\n            className=\"btn icon-button my-1 mx-2\"\n          >\n            <Icon icon=\"AddChart\" size=\"20px\" />\n            <span>Merge</span>\n          </button>\n        </div>\n      </div>\n      <div>\n        {items.length > 0 ? (\n          <form method=\"post\" id=\"customReportForm\">\n            <div className=\"row mb-2 p-2 fw-bold w-100\">\n            <div className=\"col-1\">\n                <h5>Sr no.</h5>\n              </div>\n              <div className=\"col-7\">\n                <h5>Report Name</h5>\n              </div>\n\n              <div className=\"col-2 mx-auto text-center\">Created</div>\n              <div className=\"col-2 mx-auto text-center\">Last updated</div>\n            </div>\n            <div id=\"scriptsCheckboxes\">\n              {items.map((script: any,index:any) => (\n                <Link\n                  to={`/account/ReportDetails/${script.id}`}\n                  className=\"text-decoration-none text-black\"\n                  key={script.id}\n                >\n                  <div className=\"row mb-2 p-3 table-card rounded-3 w-100 bg-light-green\">\n                  <div className=\"col-1\">\n                      <span className=\"fw-bold fs-6\">{index+1}</span>\n                    </div>\n                    <div className=\"col-7\">\n                      <span className=\"fw-bold fs-6\">{script.name}</span>\n                    </div>\n\n                    <div className=\"col-2 mx-auto text-center\">\n                    <DateFormatter isoString={script.created}/>\n                      \n                    </div>\n                    <div className=\"col-2 mx-auto text-center\">\n                    <DateFormatter isoString={script.last_updated}/>\n \n                    </div>\n                  </div>\n                </Link>\n              ))}\n            </div>\n          </form>\n        ) : (\n         <Loader/>\n        )}\n      </div>\n   \n\n      <MergeReports show={mergeshow} handleClose={()=>setShowmerges(false)}  allreport={allreport}/>\n    </div>\n  );\n};\n\nexport default Report;\n"],"names":["items","config","arguments","length","undefined","sortConfig","setSortConfig","useState","useMemo","sortableItems","sort","a","b","aValue","key","bValue","isNaN","Date","parse","dateA","dateB","direction","requestSort","getClassNamesFor","_ref","isoString","formattedDateTime","toLocaleString","_jsx","_Fragment","children","_store$script","_store$script$Scripts","show","handleClose","allreport","dispatch","useDispatch","store","useSelector","i","loginUser","setLoginUser","script","Scripts","results","useEffect","storedLoginUser","localStorage","getItem","JSON","async","GetAllScripts","token","access","error","console","log","getDAta","scriptOptions","map","report","value","id","label","name","validationSchema","Yup","required","scripts","of","min","Modal","size","centered","onHide","_jsxs","Body","className","style","borderRadius","overflow","Formik","initialValues","reports","onSubmit","values","mergereports","_ref2","setFieldValue","Form","htmlFor","Field","ErrorMessage","component","Select","isMulti","options","onChange","selectedOptions","option","placeholder","onClick","type","Report","_store$report","_store$report$reports","loading","useSortableData","GetAllreports","setShow","mergeshow","setShowmerges","Icon","icon","method","index","Link","to","DateFormatter","created","last_updated","Loader","MergeReports"],"sourceRoot":""}